/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/spotify-web-api-node";
exports.ids = ["vendor-chunks/spotify-web-api-node"];
exports.modules = {

/***/ "(ssr)/./node_modules/spotify-web-api-node/src/authentication-request.js":
/*!*************************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/authentication-request.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Request = __webpack_require__(/*! ./base-request */ \"(ssr)/./node_modules/spotify-web-api-node/src/base-request.js\");\nvar DEFAULT_HOST = \"accounts.spotify.com\", DEFAULT_PORT = 443, DEFAULT_SCHEME = \"https\";\nmodule.exports.builder = function() {\n    return Request.builder().withHost(DEFAULT_HOST).withPort(DEFAULT_PORT).withScheme(DEFAULT_SCHEME);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL2F1dGhlbnRpY2F0aW9uLXJlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUV0QixJQUFJQyxlQUFlLHdCQUNqQkMsZUFBZSxLQUNmQyxpQkFBaUI7QUFFbkJDLHNCQUFzQixHQUFHO0lBQ3ZCLE9BQU9MLFFBQVFPLE9BQU8sR0FDbkJDLFFBQVEsQ0FBQ04sY0FDVE8sUUFBUSxDQUFDTixjQUNUTyxVQUFVLENBQUNOO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktc29uZy10cmFuc2xhdGlvbi8uL25vZGVfbW9kdWxlcy9zcG90aWZ5LXdlYi1hcGktbm9kZS9zcmMvYXV0aGVudGljYXRpb24tcmVxdWVzdC5qcz9kZDJlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFJlcXVlc3QgPSByZXF1aXJlKCcuL2Jhc2UtcmVxdWVzdCcpO1xuXG52YXIgREVGQVVMVF9IT1NUID0gJ2FjY291bnRzLnNwb3RpZnkuY29tJyxcbiAgREVGQVVMVF9QT1JUID0gNDQzLFxuICBERUZBVUxUX1NDSEVNRSA9ICdodHRwcyc7XG5cbm1vZHVsZS5leHBvcnRzLmJ1aWxkZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFJlcXVlc3QuYnVpbGRlcigpXG4gICAgLndpdGhIb3N0KERFRkFVTFRfSE9TVClcbiAgICAud2l0aFBvcnQoREVGQVVMVF9QT1JUKVxuICAgIC53aXRoU2NoZW1lKERFRkFVTFRfU0NIRU1FKTtcbn07XG4iXSwibmFtZXMiOlsiUmVxdWVzdCIsInJlcXVpcmUiLCJERUZBVUxUX0hPU1QiLCJERUZBVUxUX1BPUlQiLCJERUZBVUxUX1NDSEVNRSIsIm1vZHVsZSIsImV4cG9ydHMiLCJidWlsZGVyIiwid2l0aEhvc3QiLCJ3aXRoUG9ydCIsIndpdGhTY2hlbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/spotify-web-api-node/src/authentication-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/spotify-web-api-node/src/base-request.js":
/*!***************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/base-request.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar Request = function(builder) {\n    if (!builder) {\n        throw new Error(\"No builder supplied to constructor\");\n    }\n    this.host = builder.host;\n    this.port = builder.port;\n    this.scheme = builder.scheme;\n    this.queryParameters = builder.queryParameters;\n    this.bodyParameters = builder.bodyParameters;\n    this.headers = builder.headers;\n    this.path = builder.path;\n};\nRequest.prototype._getter = function(key) {\n    return function() {\n        return this[key];\n    };\n};\nRequest.prototype.getHost = Request.prototype._getter(\"host\");\nRequest.prototype.getPort = Request.prototype._getter(\"port\");\nRequest.prototype.getScheme = Request.prototype._getter(\"scheme\");\nRequest.prototype.getPath = Request.prototype._getter(\"path\");\nRequest.prototype.getQueryParameters = Request.prototype._getter(\"queryParameters\");\nRequest.prototype.getBodyParameters = Request.prototype._getter(\"bodyParameters\");\nRequest.prototype.getHeaders = Request.prototype._getter(\"headers\");\nRequest.prototype.getURI = function() {\n    if (!this.scheme || !this.host || !this.port) {\n        throw new Error(\"Missing components necessary to construct URI\");\n    }\n    var uri = this.scheme + \"://\" + this.host;\n    if (this.scheme === \"http\" && this.port !== 80 || this.scheme === \"https\" && this.port !== 443) {\n        uri += \":\" + this.port;\n    }\n    if (this.path) {\n        uri += this.path;\n    }\n    return uri;\n};\nRequest.prototype.getURL = function() {\n    var uri = this.getURI();\n    if (this.getQueryParameters()) {\n        return uri + this.getQueryParameterString(this.getQueryParameters());\n    } else {\n        return uri;\n    }\n};\nRequest.prototype.getQueryParameterString = function() {\n    var queryParameters = this.getQueryParameters();\n    if (queryParameters) {\n        return \"?\" + Object.keys(queryParameters).filter(function(key) {\n            return queryParameters[key] !== undefined;\n        }).map(function(key) {\n            return key + \"=\" + queryParameters[key];\n        }).join(\"&\");\n    }\n};\nRequest.prototype.execute = function(method, callback) {\n    if (callback) {\n        method(this, callback);\n        return;\n    }\n    var _self = this;\n    return new Promise(function(resolve, reject) {\n        method(_self, function(error, result) {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n};\nvar Builder = function() {};\nBuilder.prototype._setter = function(key) {\n    return function(value) {\n        this[key] = value;\n        return this;\n    };\n};\nBuilder.prototype.withHost = Builder.prototype._setter(\"host\");\nBuilder.prototype.withPort = Builder.prototype._setter(\"port\");\nBuilder.prototype.withScheme = Builder.prototype._setter(\"scheme\");\nBuilder.prototype.withPath = Builder.prototype._setter(\"path\");\nBuilder.prototype._assigner = function(key) {\n    return function() {\n        for(var i = 0; i < arguments.length; i++){\n            this[key] = this._assign(this[key], arguments[i]);\n        }\n        return this;\n    };\n};\nBuilder.prototype.withQueryParameters = Builder.prototype._assigner(\"queryParameters\");\nBuilder.prototype.withBodyParameters = Builder.prototype._assigner(\"bodyParameters\");\nBuilder.prototype.withHeaders = Builder.prototype._assigner(\"headers\");\nBuilder.prototype.withAuth = function(accessToken) {\n    if (accessToken) {\n        this.withHeaders({\n            Authorization: \"Bearer \" + accessToken\n        });\n    }\n    return this;\n};\nBuilder.prototype._assign = function(src, obj) {\n    if (obj && Array.isArray(obj)) {\n        return obj;\n    }\n    if (obj && typeof obj === \"string\") {\n        return obj;\n    }\n    if (obj && Object.keys(obj).length > 0) {\n        return Object.assign(src || {}, obj);\n    }\n    return src;\n};\nBuilder.prototype.build = function() {\n    return new Request(this);\n};\nmodule.exports.builder = function() {\n    return new Builder();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/spotify-web-api-node/src/base-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/spotify-web-api-node/src/http-manager.js":
/*!***************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/http-manager.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar superagent = __webpack_require__(/*! superagent */ \"(ssr)/./node_modules/superagent/lib/node/index.js\"), { TimeoutError, WebapiError, WebapiRegularError, WebapiAuthenticationError, WebapiPlayerError } = __webpack_require__(/*! ./response-error */ \"(ssr)/./node_modules/spotify-web-api-node/src/response-error.js\");\nvar HttpManager = {};\n/* Create superagent options from the base request */ var _getParametersFromRequest = function(request) {\n    var options = {};\n    if (request.getQueryParameters()) {\n        options.query = request.getQueryParameters();\n    }\n    if (request.getHeaders() && request.getHeaders()[\"Content-Type\"] === \"application/json\") {\n        options.data = JSON.stringify(request.getBodyParameters());\n    } else if (request.getBodyParameters()) {\n        options.data = request.getBodyParameters();\n    }\n    if (request.getHeaders()) {\n        options.headers = request.getHeaders();\n    }\n    return options;\n};\nvar _toError = function(response) {\n    if (typeof response.body === \"object\" && response.body.error && typeof response.body.error === \"object\" && response.body.error.reason) {\n        return new WebapiPlayerError(response.body, response.headers, response.statusCode);\n    }\n    if (typeof response.body === \"object\" && response.body.error && typeof response.body.error === \"object\") {\n        return new WebapiRegularError(response.body, response.headers, response.statusCode);\n    }\n    if (typeof response.body === \"object\" && response.body.error && typeof response.body.error === \"string\") {\n        return new WebapiAuthenticationError(response.body, response.headers, response.statusCode);\n    }\n    /* Other type of error, or unhandled Web API error format */ return new WebapiError(response.body, response.headers, response.statusCode, response.body);\n};\n/* Make the request to the Web API */ HttpManager._makeRequest = function(method, options, uri, callback) {\n    var req = method.bind(superagent)(uri);\n    if (options.query) {\n        req.query(options.query);\n    }\n    if (options.headers) {\n        req.set(options.headers);\n    }\n    if (options.data) {\n        req.send(options.data);\n    }\n    req.end(function(err, response) {\n        if (err) {\n            if (err.timeout) {\n                return callback(new TimeoutError());\n            } else if (err.response) {\n                return callback(_toError(err.response));\n            } else {\n                return callback(err);\n            }\n        }\n        return callback(null, {\n            body: response.body,\n            headers: response.headers,\n            statusCode: response.statusCode\n        });\n    });\n};\n/**\n * Make a HTTP GET request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */ HttpManager.get = function(request, callback) {\n    var options = _getParametersFromRequest(request);\n    var method = superagent.get;\n    HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP POST request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */ HttpManager.post = function(request, callback) {\n    var options = _getParametersFromRequest(request);\n    var method = superagent.post;\n    HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP DELETE request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */ HttpManager.del = function(request, callback) {\n    var options = _getParametersFromRequest(request);\n    var method = superagent.del;\n    HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP PUT request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */ HttpManager.put = function(request, callback) {\n    var options = _getParametersFromRequest(request);\n    var method = superagent.put;\n    HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\nmodule.exports = HttpManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/spotify-web-api-node/src/http-manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/spotify-web-api-node/src/response-error.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/response-error.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("/* Timeout */ class NamedError extends Error {\n    get name() {\n        return this.constructor.name;\n    }\n}\nclass TimeoutError extends NamedError {\n    constructor(){\n        const message = \"A timeout occurred while communicating with Spotify's Web API.\";\n        super(message);\n    }\n}\n/* Web API Parent and fallback error */ class WebapiError extends NamedError {\n    constructor(body, headers, statusCode, message){\n        super(message);\n        this.body = body;\n        this.headers = headers;\n        this.statusCode = statusCode;\n    }\n}\n/** \n * Regular Error\n * { status : <integer>, message : <string> }\n */ class WebapiRegularError extends WebapiError {\n    constructor(body, headers, statusCode){\n        const message = \"An error occurred while communicating with Spotify's Web API.\\n\" + \"Details: \" + body.error.message + \".\";\n        super(body, headers, statusCode, message);\n    }\n}\n/**\n * Authentication Error \n * { error : <string>, error_description : <string> }\n */ class WebapiAuthenticationError extends WebapiError {\n    constructor(body, headers, statusCode){\n        const message = \"An authentication error occurred while communicating with Spotify's Web API.\\n\" + \"Details: \" + body.error + (body.error_description ? \" \" + body.error_description + \".\" : \".\");\n        super(body, headers, statusCode, message);\n    }\n}\n/**\n * Player Error \n * { status : <integer>, message : <string>, reason : <string> }\n */ class WebapiPlayerError extends WebapiError {\n    constructor(body, headers, statusCode){\n        const message = \"An error occurred while communicating with Spotify's Web API.\\n\" + \"Details: \" + body.error.message + (body.error.reason ? \" \" + body.error.reason + \".\" : \".\");\n        super(body, headers, statusCode, message);\n    }\n}\nmodule.exports = {\n    WebapiError,\n    TimeoutError,\n    WebapiRegularError,\n    WebapiAuthenticationError,\n    WebapiPlayerError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1zb25nLXRyYW5zbGF0aW9uLy4vbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy9yZXNwb25zZS1lcnJvci5qcz9lM2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIFRpbWVvdXQgKi9cbmNsYXNzIE5hbWVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH0gIFxufVxuXG5jbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBOYW1lZEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9ICdBIHRpbWVvdXQgb2NjdXJyZWQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIFNwb3RpZnlcXCdzIFdlYiBBUEkuJztcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxuXG59XG5cbi8qIFdlYiBBUEkgUGFyZW50IGFuZCBmYWxsYmFjayBlcnJvciAqL1xuY2xhc3MgV2ViYXBpRXJyb3IgZXh0ZW5kcyBOYW1lZEVycm9yIHtcbiAgY29uc3RydWN0b3IoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSwgbWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICB9XG5cbn1cblxuLyoqIFxuICogUmVndWxhciBFcnJvclxuICogeyBzdGF0dXMgOiA8aW50ZWdlcj4sIG1lc3NhZ2UgOiA8c3RyaW5nPiB9XG4gKi9cbmNsYXNzIFdlYmFwaVJlZ3VsYXJFcnJvciBleHRlbmRzIFdlYmFwaUVycm9yIHtcbiAgY29uc3RydWN0b3IoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIFNwb3RpZnlcXCdzIFdlYiBBUEkuXFxuJyArXG4gICAgJ0RldGFpbHM6ICcgKyBib2R5LmVycm9yLm1lc3NhZ2UgKyAnLic7XG5cbiAgICBzdXBlcihib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlLCBtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIEF1dGhlbnRpY2F0aW9uIEVycm9yIFxuICogeyBlcnJvciA6IDxzdHJpbmc+LCBlcnJvcl9kZXNjcmlwdGlvbiA6IDxzdHJpbmc+IH1cbiAqL1xuY2xhc3MgV2ViYXBpQXV0aGVudGljYXRpb25FcnJvciBleHRlbmRzIFdlYmFwaUVycm9yIHtcbiAgY29uc3RydWN0b3IoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnQW4gYXV0aGVudGljYXRpb24gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIFNwb3RpZnlcXCdzIFdlYiBBUEkuXFxuJyArXG4gICAgJ0RldGFpbHM6ICcgKyBib2R5LmVycm9yICsgKGJvZHkuZXJyb3JfZGVzY3JpcHRpb24gPyAnICcgKyBib2R5LmVycm9yX2Rlc2NyaXB0aW9uICsgJy4nIDogJy4nKTtcblxuICAgIHN1cGVyKGJvZHksIGhlYWRlcnMsIHN0YXR1c0NvZGUsIG1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogUGxheWVyIEVycm9yIFxuICogeyBzdGF0dXMgOiA8aW50ZWdlcj4sIG1lc3NhZ2UgOiA8c3RyaW5nPiwgcmVhc29uIDogPHN0cmluZz4gfVxuICovXG5jbGFzcyBXZWJhcGlQbGF5ZXJFcnJvciBleHRlbmRzIFdlYmFwaUVycm9yIHtcbiAgY29uc3RydWN0b3IoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIFNwb3RpZnlcXCdzIFdlYiBBUEkuXFxuJyArXG4gICAgJ0RldGFpbHM6ICcgKyBib2R5LmVycm9yLm1lc3NhZ2UgKyAoYm9keS5lcnJvci5yZWFzb24gPyAnICcgKyBib2R5LmVycm9yLnJlYXNvbiArICcuJyA6ICcuJyk7XG5cbiAgICBzdXBlcihib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlLCBtZXNzYWdlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgV2ViYXBpRXJyb3IsIFRpbWVvdXRFcnJvciwgV2ViYXBpUmVndWxhckVycm9yLCBXZWJhcGlBdXRoZW50aWNhdGlvbkVycm9yLCBXZWJhcGlQbGF5ZXJFcnJvciB9OyJdLCJuYW1lcyI6WyJOYW1lZEVycm9yIiwiRXJyb3IiLCJuYW1lIiwiY29uc3RydWN0b3IiLCJUaW1lb3V0RXJyb3IiLCJtZXNzYWdlIiwiV2ViYXBpRXJyb3IiLCJib2R5IiwiaGVhZGVycyIsInN0YXR1c0NvZGUiLCJXZWJhcGlSZWd1bGFyRXJyb3IiLCJlcnJvciIsIldlYmFwaUF1dGhlbnRpY2F0aW9uRXJyb3IiLCJlcnJvcl9kZXNjcmlwdGlvbiIsIldlYmFwaVBsYXllckVycm9yIiwicmVhc29uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxHQUNYLE1BQU1BLG1CQUFtQkM7SUFDdkIsSUFBSUMsT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDQyxXQUFXLENBQUNELElBQUk7SUFDOUI7QUFDRjtBQUVBLE1BQU1FLHFCQUFxQko7SUFDekJHLGFBQWM7UUFDWixNQUFNRSxVQUFVO1FBQ2hCLEtBQUssQ0FBQ0E7SUFDUjtBQUVGO0FBRUEscUNBQXFDLEdBQ3JDLE1BQU1DLG9CQUFvQk47SUFDeEJHLFlBQVlJLElBQUksRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVKLE9BQU8sQ0FBRTtRQUM5QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRSxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3BCO0FBRUY7QUFFQTs7O0NBR0MsR0FDRCxNQUFNQywyQkFBMkJKO0lBQy9CSCxZQUFZSSxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxDQUFFO1FBQ3JDLE1BQU1KLFVBQVUsb0VBQ2hCLGNBQWNFLEtBQUtJLEtBQUssQ0FBQ04sT0FBTyxHQUFHO1FBRW5DLEtBQUssQ0FBQ0UsTUFBTUMsU0FBU0MsWUFBWUo7SUFDbkM7QUFDRjtBQUVBOzs7Q0FHQyxHQUNELE1BQU1PLGtDQUFrQ047SUFDdENILFlBQVlJLElBQUksRUFBRUMsT0FBTyxFQUFFQyxVQUFVLENBQUU7UUFDckMsTUFBTUosVUFBVSxtRkFDaEIsY0FBY0UsS0FBS0ksS0FBSyxHQUFJSixDQUFBQSxLQUFLTSxpQkFBaUIsR0FBRyxNQUFNTixLQUFLTSxpQkFBaUIsR0FBRyxNQUFNLEdBQUU7UUFFNUYsS0FBSyxDQUFDTixNQUFNQyxTQUFTQyxZQUFZSjtJQUNuQztBQUNGO0FBRUE7OztDQUdDLEdBQ0QsTUFBTVMsMEJBQTBCUjtJQUM5QkgsWUFBWUksSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsQ0FBRTtRQUNyQyxNQUFNSixVQUFVLG9FQUNoQixjQUFjRSxLQUFLSSxLQUFLLENBQUNOLE9BQU8sR0FBSUUsQ0FBQUEsS0FBS0ksS0FBSyxDQUFDSSxNQUFNLEdBQUcsTUFBTVIsS0FBS0ksS0FBSyxDQUFDSSxNQUFNLEdBQUcsTUFBTSxHQUFFO1FBRTFGLEtBQUssQ0FBQ1IsTUFBTUMsU0FBU0MsWUFBWUo7SUFDbkM7QUFDRjtBQUVBVyxPQUFPQyxPQUFPLEdBQUc7SUFBRVg7SUFBYUY7SUFBY007SUFBb0JFO0lBQTJCRTtBQUFrQiIsImZpbGUiOiIoc3NyKS8uL25vZGVfbW9kdWxlcy9zcG90aWZ5LXdlYi1hcGktbm9kZS9zcmMvcmVzcG9uc2UtZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/spotify-web-api-node/src/response-error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/spotify-web-api-node/src/server-methods.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/server-methods.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar AuthenticationRequest = __webpack_require__(/*! ./authentication-request */ \"(ssr)/./node_modules/spotify-web-api-node/src/authentication-request.js\");\nvar HttpManager = __webpack_require__(/*! ./http-manager */ \"(ssr)/./node_modules/spotify-web-api-node/src/http-manager.js\");\nmodule.exports = {\n    /**\n   * Retrieve a URL where the user can give the application permissions.\n   * @param {string[]} scopes The scopes corresponding to the permissions the application needs.\n   * @param {string} state A parameter that you can use to maintain a value between the request and the callback to redirect_uri.It is useful to prevent CSRF exploits.\n   * @param {boolean} showDialog A parameter that you can use to force the user to approve the app on each login rather than being automatically redirected.\n   * @param {string} responseType An optional parameter that you can use to specify the code response based on the authentication type - can be set to 'code' or 'token'. Default 'code' to ensure backwards compatability.\n   * @returns {string} The URL where the user can give application permissions.\n   */ createAuthorizeURL: function(scopes, state, showDialog, responseType = \"code\") {\n        return AuthenticationRequest.builder().withPath(\"/authorize\").withQueryParameters({\n            client_id: this.getClientId(),\n            response_type: responseType,\n            redirect_uri: this.getRedirectURI(),\n            scope: scopes.join(\"%20\"),\n            state: state,\n            show_dialog: showDialog && !!showDialog\n        }).build().getURL();\n    },\n    /**\n   * Request an access token using the Client Credentials flow.\n   * Requires that client ID and client secret has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          token type and time to expiration. If rejected, it contains an error object. Not returned if a callback is given.\n   */ clientCredentialsGrant: function(callback) {\n        return AuthenticationRequest.builder().withPath(\"/api/token\").withBodyParameters({\n            grant_type: \"client_credentials\"\n        }).withHeaders({\n            Authorization: \"Basic \" + new Buffer(this.getClientId() + \":\" + this.getClientSecret()).toString(\"base64\"),\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Request an access token using the Authorization Code flow.\n   * Requires that client ID, client secret, and redirect URI has been set previous to the call.\n   * @param {string} code The authorization code returned in the callback in the Authorization Code flow.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          refresh token, token type and time to expiration. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */ authorizationCodeGrant: function(code, callback) {\n        return AuthenticationRequest.builder().withPath(\"/api/token\").withBodyParameters({\n            grant_type: \"authorization_code\",\n            redirect_uri: this.getRedirectURI(),\n            code: code,\n            client_id: this.getClientId(),\n            client_secret: this.getClientSecret()\n        }).withHeaders({\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Refresh the access token given that it hasn't expired.\n   * Requires that client ID, client secret and refresh token has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing the\n   *          access token, time to expiration and token type. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */ refreshAccessToken: function(callback) {\n        return AuthenticationRequest.builder().withPath(\"/api/token\").withBodyParameters({\n            grant_type: \"refresh_token\",\n            refresh_token: this.getRefreshToken()\n        }).withHeaders({\n            Authorization: \"Basic \" + new Buffer(this.getClientId() + \":\" + this.getClientSecret()).toString(\"base64\"),\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }).build().execute(HttpManager.post, callback);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/spotify-web-api-node/src/server-methods.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/spotify-web-api-node/src/server.js":
/*!*********************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/server.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var SpotifyWebApi = __webpack_require__(/*! ./spotify-web-api */ \"(ssr)/./node_modules/spotify-web-api-node/src/spotify-web-api.js\");\nvar ServerMethods = __webpack_require__(/*! ./server-methods */ \"(ssr)/./node_modules/spotify-web-api-node/src/server-methods.js\");\nSpotifyWebApi._addMethods(ServerMethods);\nmodule.exports = SpotifyWebApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3NlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBQzVCLElBQUlDLGdCQUFnQkQsbUJBQU9BLENBQUM7QUFDNUJELGNBQWNHLFdBQVcsQ0FBQ0Q7QUFDMUJFLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1zb25nLXRyYW5zbGF0aW9uLy4vbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy9zZXJ2ZXIuanM/N2FlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3BvdGlmeVdlYkFwaSA9IHJlcXVpcmUoJy4vc3BvdGlmeS13ZWItYXBpJyk7XG52YXIgU2VydmVyTWV0aG9kcyA9IHJlcXVpcmUoJy4vc2VydmVyLW1ldGhvZHMnKTtcblNwb3RpZnlXZWJBcGkuX2FkZE1ldGhvZHMoU2VydmVyTWV0aG9kcyk7XG5tb2R1bGUuZXhwb3J0cyA9IFNwb3RpZnlXZWJBcGk7XG4iXSwibmFtZXMiOlsiU3BvdGlmeVdlYkFwaSIsInJlcXVpcmUiLCJTZXJ2ZXJNZXRob2RzIiwiX2FkZE1ldGhvZHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/spotify-web-api-node/src/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/spotify-web-api-node/src/spotify-web-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/spotify-web-api.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar AuthenticationRequest = __webpack_require__(/*! ./authentication-request */ \"(ssr)/./node_modules/spotify-web-api-node/src/authentication-request.js\"), WebApiRequest = __webpack_require__(/*! ./webapi-request */ \"(ssr)/./node_modules/spotify-web-api-node/src/webapi-request.js\"), HttpManager = __webpack_require__(/*! ./http-manager */ \"(ssr)/./node_modules/spotify-web-api-node/src/http-manager.js\");\nfunction SpotifyWebApi(credentials) {\n    this._credentials = credentials || {};\n}\nSpotifyWebApi.prototype = {\n    setCredentials: function(credentials) {\n        for(var key in credentials){\n            if (credentials.hasOwnProperty(key)) {\n                this._credentials[key] = credentials[key];\n            }\n        }\n    },\n    getCredentials: function() {\n        return this._credentials;\n    },\n    resetCredentials: function() {\n        this._credentials = null;\n    },\n    setClientId: function(clientId) {\n        this._setCredential(\"clientId\", clientId);\n    },\n    setClientSecret: function(clientSecret) {\n        this._setCredential(\"clientSecret\", clientSecret);\n    },\n    setAccessToken: function(accessToken) {\n        this._setCredential(\"accessToken\", accessToken);\n    },\n    setRefreshToken: function(refreshToken) {\n        this._setCredential(\"refreshToken\", refreshToken);\n    },\n    setRedirectURI: function(redirectUri) {\n        this._setCredential(\"redirectUri\", redirectUri);\n    },\n    getRedirectURI: function() {\n        return this._getCredential(\"redirectUri\");\n    },\n    getClientId: function() {\n        return this._getCredential(\"clientId\");\n    },\n    getClientSecret: function() {\n        return this._getCredential(\"clientSecret\");\n    },\n    getAccessToken: function() {\n        return this._getCredential(\"accessToken\");\n    },\n    getRefreshToken: function() {\n        return this._getCredential(\"refreshToken\");\n    },\n    resetClientId: function() {\n        this._resetCredential(\"clientId\");\n    },\n    resetClientSecret: function() {\n        this._resetCredential(\"clientSecret\");\n    },\n    resetAccessToken: function() {\n        this._resetCredential(\"accessToken\");\n    },\n    resetRefreshToken: function() {\n        this._resetCredential(\"refreshToken\");\n    },\n    resetRedirectURI: function() {\n        this._resetCredential(\"redirectUri\");\n    },\n    _setCredential: function(credentialKey, value) {\n        this._credentials = this._credentials || {};\n        this._credentials[credentialKey] = value;\n    },\n    _getCredential: function(credentialKey) {\n        if (!this._credentials) {\n            return;\n        } else {\n            return this._credentials[credentialKey];\n        }\n    },\n    _resetCredential: function(credentialKey) {\n        if (!this._credentials) {\n            return;\n        } else {\n            this._credentials[credentialKey] = null;\n        }\n    },\n    /**\n   * Look up a track.\n   * @param {string} trackId The track's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getTrack('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the track. Not returned if a callback is given.\n   */ getTrack: function(trackId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/tracks/\" + trackId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several tracks.\n   * @param {string[]} trackIds The IDs of the artists.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */ getTracks: function(trackIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/tracks\").withQueryParameters({\n            ids: trackIds.join(\",\")\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up an album.\n   * @param {string} albumId The album's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbum('0sNOF9WDwhWunNAHPD3Baj').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the album. Not returned if a callback is given.\n   */ getAlbum: function(albumId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/albums/\" + albumId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several albums.\n   * @param {string[]} albumIds The IDs of the albums.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbums(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the albums. Not returned if a callback is given.\n   */ getAlbums: function(albumIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/albums\").withQueryParameters({\n            ids: albumIds.join(\",\")\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up an artist.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example api.getArtist('1u7kkVrr14iBvrpYnZILJR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artist. Not returned if a callback is given.\n   */ getArtist: function(artistId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists/\" + artistId).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several artists.\n   * @param {string[]} artistIds The IDs of the artists.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */ getArtists: function(artistIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists\").withQueryParameters({\n            ids: artistIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Search for music entities of certain types.\n   * @param {string} query The search query.\n   * @param {string[]} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', 'track', 'show', and 'episode'.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example search('Abba', ['track', 'playlist'], { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ search: function(query, types, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/search/\").withQueryParameters({\n            type: types.join(\",\"),\n            q: query\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Search for an album.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchAlbums('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchAlbums: function(query, options, callback) {\n        return this.search(query, [\n            \"album\"\n        ], options, callback);\n    },\n    /**\n   * Search for an artist.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchArtists('David Bowie', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchArtists: function(query, options, callback) {\n        return this.search(query, [\n            \"artist\"\n        ], options, callback);\n    },\n    /**\n   * Search for a track.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchTracks('Mr. Brightside', { limit : 3, offset : 2 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchTracks: function(query, options, callback) {\n        return this.search(query, [\n            \"track\"\n        ], options, callback);\n    },\n    /**\n   * Search for playlists.\n   * @param {string} query The search query.\n   * @param {Object} options The possible options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchPlaylists('workout', { limit : 1, offset : 0 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchPlaylists: function(query, options, callback) {\n        return this.search(query, [\n            \"playlist\"\n        ], options, callback);\n    },\n    /**\n   * Get an artist's albums.\n   * @param {string} artistId The artist's ID.\n   * @options {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistAlbums('0oSGxfWSnnOXhD2fKuz2Gy', { album_type : 'album', country : 'GB', limit : 2, offset : 5 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the albums\n   *          for the given artist. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ getArtistAlbums: function(artistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists/\" + artistId + \"/albums\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the tracks of an album.\n   * @param albumId the album's ID.\n   * @options {Object} [options] The possible options, e.g. limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    tracks in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */ getAlbumTracks: function(albumId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/albums/\" + albumId + \"/tracks\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get an artist's top tracks.\n   * @param {string} artistId The artist's ID.\n   * @param {string} country The country/territory where the tracks are most popular. (format: ISO 3166-1 alpha-2)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          artist's top tracks in the given country. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ getArtistTopTracks: function(artistId, country, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists/\" + artistId + \"/top-tracks\").withQueryParameters({\n            country: country\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get related artists.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistRelatedArtists('0oSGxfWSnnOXhD2fKuz2Gy').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          related artists. If the promise is rejected, it contains an error object. Not returned if a callback is given.\n   */ getArtistRelatedArtists: function(artistId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists/\" + artistId + \"/related-artists\").build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get information about a user.\n   * @param userId The user ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUser('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getUser: function(userId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/users/\" + encodeURIComponent(userId)).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get information about the user that has signed in (the current user).\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getMe().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. The amount of information\n   *          depends on the permissions given by the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getMe: function(callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me\").build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get a user's playlists.\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUserPlaylists('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of playlists. If rejected, it contains an error object. Not returned if a callback is given.\n   */ getUserPlaylists: function(userId, options, callback) {\n        var path;\n        if (typeof userId === \"string\") {\n            path = \"/v1/users/\" + encodeURIComponent(userId) + \"/playlists\";\n        } else if (typeof userId === \"object\") {\n            callback = options;\n            options = userId;\n            path = \"/v1/me/playlists\";\n        } else {\n            path = \"/v1/me/playlists\";\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(path).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylist('3EsfV6XzCHU8SPNdbnFogK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */ getPlaylist: function(playlistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get tracks in a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] Optional options, such as fields.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylistTracks('3ktAYNcRHpazJ9qecm3ptn').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object that containing\n   * the tracks in the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */ getPlaylistTracks: function(playlistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Create a playlist.\n   * @param {string} [name] The name of the playlist.\n   * @param {Object} [options] The possible options, being description, collaborative and public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example createPlaylist('My playlist', {''description': 'My description', 'collaborative' : false, 'public': true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing information about the\n   *          created playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */ createPlaylist: function(name, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/playlists\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            name: name\n        }, options).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Follow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, currently only public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ followPlaylist: function(playlistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/followers\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(options).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Unfollow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ unfollowPlaylist: function(playlistId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/followers\").build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Change playlist details.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, e.g. name, public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example changePlaylistDetails('3EsfV6XzCHU8SPNdbnFogK', {name: 'New name', public: true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ changePlaylistDetails: function(playlistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId).withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(options).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Replace the image used to represent a specific playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string} base64URI Base64 encoded JPEG image data, maximum payload size is 256 KB\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example uploadCustomPlaylistCoverImage('3EsfV6XzCHU8SPNdbnFogK', 'longbase64uri').then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ uploadCustomPlaylistCoverImage: function(playlistId, base64URI, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/images\").withHeaders({\n            \"Content-Type\": \"image/jpeg\"\n        }).withBodyParameters(base64URI).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Add tracks to a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string[]} tracks URIs of the tracks to add to the playlist.\n   * @param {Object} [options] Options, position being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example addTracksToPlaylist('3EsfV6XzCHU8SPNdbnFogK',\n              '[\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]').then(...)\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ addTracksToPlaylist: function(playlistId, tracks, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withQueryParameters(options).withBodyParameters({\n            uris: tracks\n        }).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Remove tracks from a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} tracks An array of objects containing a property called uri with the track URI (String), and\n   * an optional property called positions (int[]), e.g. { uri : \"spotify:track:491rM2JN8KvmV6p0oDDuJT\", positions : [0, 15] }\n   * @param {Object} options Options, snapshot_id being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ removeTracksFromPlaylist: function(playlistId, tracks, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            tracks: tracks\n        }, options).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Remove tracks from a playlist by position instead of specifying the tracks' URIs.\n   * @param {string} playlistId The playlist's ID\n   * @param {int[]} positions The positions of the tracks in the playlist that should be removed\n   * @param {string} snapshot_id The snapshot ID, or version, of the playlist. Required\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ removeTracksFromPlaylistByPosition: function(playlistId, positions, snapshotId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            positions: positions,\n            snapshot_id: snapshotId\n        }).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Replace tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} uris An array of track URIs (strings)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ replaceTracksInPlaylist: function(playlistId, uris, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            uris: uris\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Reorder tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {int} rangeStart The position of the first track to be reordered.\n   * @param {int} insertBefore The position where the tracks should be inserted.\n   * @param {Object} options Optional parameters, i.e. range_length and snapshot_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ reorderTracksInPlaylist: function(playlistId, rangeStart, insertBefore, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            range_start: rangeStart,\n            insert_before: insertBefore\n        }, options).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getAudioFeaturesForTrack: function(trackId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/audio-features/\" + trackId).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioAnalysisForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio analysis. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getAudioAnalysisForTrack: function(trackId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/audio-analysis/\" + trackId).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get audio features for multiple tracks identified by their unique Spotify ID.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTracks(['38P3Q4QcdjQALGF2Z92BmR', '2HO2bnoMrpnZUbUqiilLHi']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features for the tracks. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getAudioFeaturesForTracks: function(trackIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/audio-features\").withQueryParameters({\n            ids: trackIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getRecommendations({ min_energy: 0.4, seed_artists: ['6mfK6Q2tzLMEchAr0e9Uzu', '4DYFVNKZ1uixa6SQTvzQwJ'], min_popularity: 50 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of tracks and a list of seeds. If rejected, it contains an error object. Not returned if a callback is given.\n   */ getRecommendations: function(options, callback) {\n        var _opts = {};\n        var optionsOfTypeArray = [\n            \"seed_artists\",\n            \"seed_genres\",\n            \"seed_tracks\"\n        ];\n        for(var option in options){\n            if (options.hasOwnProperty(option)) {\n                if (optionsOfTypeArray.indexOf(option) !== -1 && Object.prototype.toString.call(options[option]) === \"[object Array]\") {\n                    _opts[option] = options[option].join(\",\");\n                } else {\n                    _opts[option] = options[option];\n                }\n            }\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/recommendations\").withQueryParameters(_opts).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAvailableGenreSeeds().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of available genres to be used as seeds for recommendations.\n   *          If rejected, it contains an error object. Not returned if a callback is given.\n   */ getAvailableGenreSeeds: function(callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/recommendations/available-genre-seeds\").build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve the tracks that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist track objects. Not returned if a callback is given.\n   */ getMySavedTracks: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/tracks\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the track ID in the request.\n   * The boolean value of true indicates that the track is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */ containsMySavedTracks: function(trackIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/tracks/contains\").withQueryParameters({\n            ids: trackIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Remove a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */ removeFromMySavedTracks: function(trackIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            ids: trackIds\n        }).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Add a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */ addToMySavedTracks: function(trackIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            ids: trackIds\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Remove an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */ removeFromMySavedAlbums: function(albumIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/albums\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(albumIds).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Add an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */ addToMySavedAlbums: function(albumIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/albums\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(albumIds).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Retrieve the albums that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist album objects. Not returned if a callback is given.\n   */ getMySavedAlbums: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/albums\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check if one or more albums is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the album ID in the request.\n   * The boolean value of true indicates that the album is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */ containsMySavedAlbums: function(albumIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/albums/contains\").withQueryParameters({\n            ids: albumIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the current user's top artists based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of artists,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyTopArtists: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/top/artists\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the current user's top tracks based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyTopTracks: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/top/tracks\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the Current User's Recently Played Tracks\n   * @param {Object} [options] Options, being type, after, limit, before.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of play history objects,\n   *          otherwise an error. Not returned if a callback is given. Note that the response will be empty\n   *          in case the user has enabled private session.\n   */ getMyRecentlyPlayedTracks: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/recently-played\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Add track or episode to device queue\n   * @param {string} [uri] uri of the track or episode to add\n   * @param {Object} [options] Options, being device_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */ addToQueue: function(uri, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/queue\").withQueryParameters({\n            uri: uri\n        }, options).build().execute(HttpManager.post, callback);\n    },\n    /** \n   * Get the Current User's Available Devices\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of device objects,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyDevices: function(callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/devices\").build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the Current User's Currently Playing Track.\n   * @param {Object} [options] Options, being market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyCurrentPlayingTrack: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/currently-playing\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get Information About The User's Current Playback State\n   * @param {Object} [options] Options, being market and additional_types.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyCurrentPlaybackState: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Transfer a User's Playback\n   * @param {string[]} [deviceIds] An _array_ containing a device ID on which playback should be started/transferred. \n   * (NOTE: The API is currently only supporting a single device ID.)\n   * @param {Object} [options] Options, the only one being 'play'.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ transferMyPlayback: function(deviceIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            device_ids: deviceIds\n        }, options).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Starts o Resumes the Current User's Playback\n   * @param {Object} [options] Options, being device_id, context_uri, offset, uris, position_ms.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example play({context_uri: 'spotify:album:5ht7ItJgpBH7W6vJ5BqpPr'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ play: function(options, callback) {\n        /*jshint camelcase: false */ var _options = options || {};\n        var queryParams = _options.device_id ? {\n            device_id: _options.device_id\n        } : null;\n        var postData = {};\n        [\n            \"context_uri\",\n            \"uris\",\n            \"offset\",\n            \"position_ms\"\n        ].forEach(function(field) {\n            if (field in _options) {\n                postData[field] = _options[field];\n            }\n        });\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/play\").withQueryParameters(queryParams).withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(postData).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Pauses the Current User's Playback\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example pause().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ pause: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/pause\")/*jshint camelcase: false */ .withQueryParameters(options && options.device_id ? {\n            device_id: options.device_id\n        } : null).withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Skip the Current User's Playback To Previous Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToPrevious().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ skipToPrevious: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/previous\").withQueryParameters(options && options.device_id ? {\n            device_id: options.device_id\n        } : null).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Skip the Current User's Playback To Next Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToNext().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ skipToNext: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/next\").withQueryParameters(options && options.device_id ? {\n            device_id: options.device_id\n        } : null).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Seeks to the given position in the user’s currently playing track.\n   *\n   * @param {number} positionMs The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */ seek: function(positionMs, options, callback) {\n        var params = {\n            /* jshint camelcase: false */ position_ms: positionMs\n        };\n        if (options && \"device_id\" in options) {\n            /* jshint camelcase: false */ params.device_id = options.device_id;\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/seek\").withQueryParameters(params).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Set Repeat Mode On The Current User's Playback\n   * @param {string} [state] State (track, context, or off)\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setRepeat('context', {}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ setRepeat: function(state, options, callback) {\n        var params = {\n            state: state\n        };\n        if (options && \"device_id\" in options) {\n            /* jshint camelcase: false */ params.device_id = options.device_id;\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/repeat\").withQueryParameters(params).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Set Shuffle Mode On The Current User's Playback\n   * @param {boolean} [state] State \n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setShuffle({state: 'false'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ setShuffle: function(state, options, callback) {\n        var params = {\n            state: state\n        };\n        if (options && \"device_id\" in options) {\n            /* jshint camelcase: false */ params.device_id = options.device_id;\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/shuffle\").withQueryParameters(params).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Set the volume for the user’s current playback device.\n   * @param {number} volumePercent The volume to set. Must be a value from 0 to 100.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */ setVolume: function(volumePercent, options, callback) {\n        var params = {\n            /* jshint camelcase: false */ volume_percent: volumePercent\n        };\n        if (options && \"device_id\" in options) {\n            /* jshint camelcase: false */ params.device_id = options.device_id;\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/volume\").withQueryParameters(params).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Add the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ followUsers: function(userIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            ids: userIds.join(\",\"),\n            type: \"user\"\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Add the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ followArtists: function(artistIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            ids: artistIds.join(\",\"),\n            type: \"artist\"\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Remove the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ unfollowUsers: function(userIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            ids: userIds.join(\",\"),\n            type: \"user\"\n        }).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Remove the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ unfollowArtists: function(artistIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            ids: artistIds.join(\",\"),\n            type: \"artist\"\n        }).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Check to see if the current user is following one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the users IDs in the request.\n   *          The boolean value of true indicates that the user is following that user, otherwise is not.\n   *          Not returned if a callback is given.\n   */ isFollowingUsers: function(userIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following/contains\").withQueryParameters({\n            ids: userIds.join(\",\"),\n            type: \"user\"\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the current user's followed artists.\n   * @param {Object} [options] Options, being after and limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */ getFollowedArtists: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            type: \"artist\"\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check if users are following a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {String[]} User IDs of the following users\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an array of booleans. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ areFollowingPlaylist: function(userId, playlistId, followerIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/users/\" + encodeURIComponent(userId) + \"/playlists/\" + playlistId + \"/followers/contains\").withQueryParameters({\n            ids: followerIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check to see if the current user is following one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the artists IDs in the request.\n   *          The boolean value of true indicates that the user is following that artist, otherwise is not.\n   *          Not returned if a callback is given.\n   */ isFollowingArtists: function(artistIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following/contains\").withQueryParameters({\n            ids: artistIds.join(\",\"),\n            type: \"artist\"\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve new releases\n   * @param {Object} [options] Options, being country, limit and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */ getNewReleases: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/new-releases\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve featured playlists\n   * @param {Object} [options] Options, being country, locale, timestamp, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * featured playlists. Not returned if a callback is given.\n   */ getFeaturedPlaylists: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/featured-playlists\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve a list of categories used to tag items in Spotify (e.g. in the 'Browse' tab)\n   * @param {Object} [options] Options, being country, locale, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object of categories.\n   * Not returned if a callback is given.\n   */ getCategories: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/categories\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve a category.\n   * @param {string} categoryId The id of the category to retrieve.\n   * @param {Object} [options] Options, being country, locale.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a category object.\n   * Not returned if a callback is given.\n   */ getCategory: function(categoryId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/categories/\" + categoryId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve playlists for a category.\n   * @param {string} categoryId The id of the category to retrieve playlists for.\n   * @param {Object} [options] Options, being country, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to a paging object containing simple playlists.\n   * Not returned if a callback is given.\n   */ getPlaylistsForCategory: function(categoryId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/categories/\" + categoryId + \"/playlists\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get a show.\n   * @param {string} showId The show's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShow('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the show. Not returned if a callback is given.\n   */ getShow: function(showId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/shows/\" + showId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several shows.\n   * @param {string[]} showIds The IDs of the shows.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShows(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the shows. Not returned if a callback is given.\n   */ getShows: function(showIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/shows\").withQueryParameters({\n            ids: showIds.join(\",\")\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check if one or more shows is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the show ID in the request.\n   * The boolean value of true indicates that the show is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */ containsMySavedShows: function(showIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/shows/contains\").withQueryParameters({\n            ids: showIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Remove an show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */ removeFromMySavedShows: function(showIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/shows\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(showIds).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Add a show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */ addToMySavedShows: function(showIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/shows\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(showIds).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Retrieve the shows that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist show objects. Not returned if a callback is given.\n   */ getMySavedShows: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/shows\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the episodes of an show.\n   * @param showId the show's ID.\n   * @options {Object} [options] The possible options, being limit, offset, and market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShowEpisodes('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    episodes in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */ getShowEpisodes: function(showId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/shows/\" + showId + \"/episodes\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Search for a show.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchShows('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchShows: function(query, options, callback) {\n        return this.search(query, [\n            \"show\"\n        ], options, callback);\n    },\n    /**\n   * Search for an episode.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchEpisodes('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchEpisodes: function(query, options, callback) {\n        return this.search(query, [\n            \"episode\"\n        ], options, callback);\n    },\n    /**\n   * Look up an episode.\n   * @param {string} episodeId The episode's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisode('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episode. Not returned if a callback is given.\n   */ getEpisode: function(episodeId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/episodes/\" + episodeId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several episodes.\n   * @param {string[]} episodeIds The IDs of the episodes.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisodes(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episodes. Not returned if a callback is given.\n   */ getEpisodes: function(episodeIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/episodes\").withQueryParameters({\n            ids: episodeIds.join(\",\")\n        }, options).build().execute(HttpManager.get, callback);\n    }\n};\nSpotifyWebApi._addMethods = function(methods) {\n    for(var i in methods){\n        if (methods.hasOwnProperty(i)) {\n            this.prototype[i] = methods[i];\n        }\n    }\n};\nmodule.exports = SpotifyWebApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/spotify-web-api-node/src/spotify-web-api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/spotify-web-api-node/src/webapi-request.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/webapi-request.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Request = __webpack_require__(/*! ./base-request */ \"(ssr)/./node_modules/spotify-web-api-node/src/base-request.js\");\nvar DEFAULT_HOST = \"api.spotify.com\", DEFAULT_PORT = 443, DEFAULT_SCHEME = \"https\";\nmodule.exports.builder = function(accessToken) {\n    return Request.builder().withHost(DEFAULT_HOST).withPort(DEFAULT_PORT).withScheme(DEFAULT_SCHEME).withAuth(accessToken);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3dlYmFwaS1yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUM7QUFFdEIsSUFBSUMsZUFBZSxtQkFDakJDLGVBQWUsS0FDZkMsaUJBQWlCO0FBRW5CQyxzQkFBc0IsR0FBRyxTQUFTRyxXQUFXO0lBQzNDLE9BQU9SLFFBQVFPLE9BQU8sR0FDbkJFLFFBQVEsQ0FBQ1AsY0FDVFEsUUFBUSxDQUFDUCxjQUNUUSxVQUFVLENBQUNQLGdCQUNYUSxRQUFRLENBQUNKO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1zb25nLXRyYW5zbGF0aW9uLy4vbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy93ZWJhcGktcmVxdWVzdC5qcz9jZjQ3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFJlcXVlc3QgPSByZXF1aXJlKCcuL2Jhc2UtcmVxdWVzdCcpO1xuXG52YXIgREVGQVVMVF9IT1NUID0gJ2FwaS5zcG90aWZ5LmNvbScsXG4gIERFRkFVTFRfUE9SVCA9IDQ0MyxcbiAgREVGQVVMVF9TQ0hFTUUgPSAnaHR0cHMnO1xuXG5tb2R1bGUuZXhwb3J0cy5idWlsZGVyID0gZnVuY3Rpb24oYWNjZXNzVG9rZW4pIHtcbiAgcmV0dXJuIFJlcXVlc3QuYnVpbGRlcigpXG4gICAgLndpdGhIb3N0KERFRkFVTFRfSE9TVClcbiAgICAud2l0aFBvcnQoREVGQVVMVF9QT1JUKVxuICAgIC53aXRoU2NoZW1lKERFRkFVTFRfU0NIRU1FKVxuICAgIC53aXRoQXV0aChhY2Nlc3NUb2tlbik7XG59O1xuIl0sIm5hbWVzIjpbIlJlcXVlc3QiLCJyZXF1aXJlIiwiREVGQVVMVF9IT1NUIiwiREVGQVVMVF9QT1JUIiwiREVGQVVMVF9TQ0hFTUUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGRlciIsImFjY2Vzc1Rva2VuIiwid2l0aEhvc3QiLCJ3aXRoUG9ydCIsIndpdGhTY2hlbWUiLCJ3aXRoQXV0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/spotify-web-api-node/src/webapi-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/authentication-request.js":
/*!*************************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/authentication-request.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Request = __webpack_require__(/*! ./base-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/base-request.js\");\nvar DEFAULT_HOST = \"accounts.spotify.com\", DEFAULT_PORT = 443, DEFAULT_SCHEME = \"https\";\nmodule.exports.builder = function() {\n    return Request.builder().withHost(DEFAULT_HOST).withPort(DEFAULT_PORT).withScheme(DEFAULT_SCHEME);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL2F1dGhlbnRpY2F0aW9uLXJlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUV0QixJQUFJQyxlQUFlLHdCQUNqQkMsZUFBZSxLQUNmQyxpQkFBaUI7QUFFbkJDLHNCQUFzQixHQUFHO0lBQ3ZCLE9BQU9MLFFBQVFPLE9BQU8sR0FDbkJDLFFBQVEsQ0FBQ04sY0FDVE8sUUFBUSxDQUFDTixjQUNUTyxVQUFVLENBQUNOO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktc29uZy10cmFuc2xhdGlvbi8uL25vZGVfbW9kdWxlcy9zcG90aWZ5LXdlYi1hcGktbm9kZS9zcmMvYXV0aGVudGljYXRpb24tcmVxdWVzdC5qcz9kZDJlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFJlcXVlc3QgPSByZXF1aXJlKCcuL2Jhc2UtcmVxdWVzdCcpO1xuXG52YXIgREVGQVVMVF9IT1NUID0gJ2FjY291bnRzLnNwb3RpZnkuY29tJyxcbiAgREVGQVVMVF9QT1JUID0gNDQzLFxuICBERUZBVUxUX1NDSEVNRSA9ICdodHRwcyc7XG5cbm1vZHVsZS5leHBvcnRzLmJ1aWxkZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFJlcXVlc3QuYnVpbGRlcigpXG4gICAgLndpdGhIb3N0KERFRkFVTFRfSE9TVClcbiAgICAud2l0aFBvcnQoREVGQVVMVF9QT1JUKVxuICAgIC53aXRoU2NoZW1lKERFRkFVTFRfU0NIRU1FKTtcbn07XG4iXSwibmFtZXMiOlsiUmVxdWVzdCIsInJlcXVpcmUiLCJERUZBVUxUX0hPU1QiLCJERUZBVUxUX1BPUlQiLCJERUZBVUxUX1NDSEVNRSIsIm1vZHVsZSIsImV4cG9ydHMiLCJidWlsZGVyIiwid2l0aEhvc3QiLCJ3aXRoUG9ydCIsIndpdGhTY2hlbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/authentication-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/base-request.js":
/*!***************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/base-request.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar Request = function(builder) {\n    if (!builder) {\n        throw new Error(\"No builder supplied to constructor\");\n    }\n    this.host = builder.host;\n    this.port = builder.port;\n    this.scheme = builder.scheme;\n    this.queryParameters = builder.queryParameters;\n    this.bodyParameters = builder.bodyParameters;\n    this.headers = builder.headers;\n    this.path = builder.path;\n};\nRequest.prototype._getter = function(key) {\n    return function() {\n        return this[key];\n    };\n};\nRequest.prototype.getHost = Request.prototype._getter(\"host\");\nRequest.prototype.getPort = Request.prototype._getter(\"port\");\nRequest.prototype.getScheme = Request.prototype._getter(\"scheme\");\nRequest.prototype.getPath = Request.prototype._getter(\"path\");\nRequest.prototype.getQueryParameters = Request.prototype._getter(\"queryParameters\");\nRequest.prototype.getBodyParameters = Request.prototype._getter(\"bodyParameters\");\nRequest.prototype.getHeaders = Request.prototype._getter(\"headers\");\nRequest.prototype.getURI = function() {\n    if (!this.scheme || !this.host || !this.port) {\n        throw new Error(\"Missing components necessary to construct URI\");\n    }\n    var uri = this.scheme + \"://\" + this.host;\n    if (this.scheme === \"http\" && this.port !== 80 || this.scheme === \"https\" && this.port !== 443) {\n        uri += \":\" + this.port;\n    }\n    if (this.path) {\n        uri += this.path;\n    }\n    return uri;\n};\nRequest.prototype.getURL = function() {\n    var uri = this.getURI();\n    if (this.getQueryParameters()) {\n        return uri + this.getQueryParameterString(this.getQueryParameters());\n    } else {\n        return uri;\n    }\n};\nRequest.prototype.getQueryParameterString = function() {\n    var queryParameters = this.getQueryParameters();\n    if (queryParameters) {\n        return \"?\" + Object.keys(queryParameters).filter(function(key) {\n            return queryParameters[key] !== undefined;\n        }).map(function(key) {\n            return key + \"=\" + queryParameters[key];\n        }).join(\"&\");\n    }\n};\nRequest.prototype.execute = function(method, callback) {\n    if (callback) {\n        method(this, callback);\n        return;\n    }\n    var _self = this;\n    return new Promise(function(resolve, reject) {\n        method(_self, function(error, result) {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n};\nvar Builder = function() {};\nBuilder.prototype._setter = function(key) {\n    return function(value) {\n        this[key] = value;\n        return this;\n    };\n};\nBuilder.prototype.withHost = Builder.prototype._setter(\"host\");\nBuilder.prototype.withPort = Builder.prototype._setter(\"port\");\nBuilder.prototype.withScheme = Builder.prototype._setter(\"scheme\");\nBuilder.prototype.withPath = Builder.prototype._setter(\"path\");\nBuilder.prototype._assigner = function(key) {\n    return function() {\n        for(var i = 0; i < arguments.length; i++){\n            this[key] = this._assign(this[key], arguments[i]);\n        }\n        return this;\n    };\n};\nBuilder.prototype.withQueryParameters = Builder.prototype._assigner(\"queryParameters\");\nBuilder.prototype.withBodyParameters = Builder.prototype._assigner(\"bodyParameters\");\nBuilder.prototype.withHeaders = Builder.prototype._assigner(\"headers\");\nBuilder.prototype.withAuth = function(accessToken) {\n    if (accessToken) {\n        this.withHeaders({\n            Authorization: \"Bearer \" + accessToken\n        });\n    }\n    return this;\n};\nBuilder.prototype._assign = function(src, obj) {\n    if (obj && Array.isArray(obj)) {\n        return obj;\n    }\n    if (obj && typeof obj === \"string\") {\n        return obj;\n    }\n    if (obj && Object.keys(obj).length > 0) {\n        return Object.assign(src || {}, obj);\n    }\n    return src;\n};\nBuilder.prototype.build = function() {\n    return new Request(this);\n};\nmodule.exports.builder = function() {\n    return new Builder();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/base-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/http-manager.js":
/*!***************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/http-manager.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar superagent = __webpack_require__(/*! superagent */ \"(rsc)/./node_modules/superagent/lib/node/index.js\"), { TimeoutError, WebapiError, WebapiRegularError, WebapiAuthenticationError, WebapiPlayerError } = __webpack_require__(/*! ./response-error */ \"(rsc)/./node_modules/spotify-web-api-node/src/response-error.js\");\nvar HttpManager = {};\n/* Create superagent options from the base request */ var _getParametersFromRequest = function(request) {\n    var options = {};\n    if (request.getQueryParameters()) {\n        options.query = request.getQueryParameters();\n    }\n    if (request.getHeaders() && request.getHeaders()[\"Content-Type\"] === \"application/json\") {\n        options.data = JSON.stringify(request.getBodyParameters());\n    } else if (request.getBodyParameters()) {\n        options.data = request.getBodyParameters();\n    }\n    if (request.getHeaders()) {\n        options.headers = request.getHeaders();\n    }\n    return options;\n};\nvar _toError = function(response) {\n    if (typeof response.body === \"object\" && response.body.error && typeof response.body.error === \"object\" && response.body.error.reason) {\n        return new WebapiPlayerError(response.body, response.headers, response.statusCode);\n    }\n    if (typeof response.body === \"object\" && response.body.error && typeof response.body.error === \"object\") {\n        return new WebapiRegularError(response.body, response.headers, response.statusCode);\n    }\n    if (typeof response.body === \"object\" && response.body.error && typeof response.body.error === \"string\") {\n        return new WebapiAuthenticationError(response.body, response.headers, response.statusCode);\n    }\n    /* Other type of error, or unhandled Web API error format */ return new WebapiError(response.body, response.headers, response.statusCode, response.body);\n};\n/* Make the request to the Web API */ HttpManager._makeRequest = function(method, options, uri, callback) {\n    var req = method.bind(superagent)(uri);\n    if (options.query) {\n        req.query(options.query);\n    }\n    if (options.headers) {\n        req.set(options.headers);\n    }\n    if (options.data) {\n        req.send(options.data);\n    }\n    req.end(function(err, response) {\n        if (err) {\n            if (err.timeout) {\n                return callback(new TimeoutError());\n            } else if (err.response) {\n                return callback(_toError(err.response));\n            } else {\n                return callback(err);\n            }\n        }\n        return callback(null, {\n            body: response.body,\n            headers: response.headers,\n            statusCode: response.statusCode\n        });\n    });\n};\n/**\n * Make a HTTP GET request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */ HttpManager.get = function(request, callback) {\n    var options = _getParametersFromRequest(request);\n    var method = superagent.get;\n    HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP POST request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */ HttpManager.post = function(request, callback) {\n    var options = _getParametersFromRequest(request);\n    var method = superagent.post;\n    HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP DELETE request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */ HttpManager.del = function(request, callback) {\n    var options = _getParametersFromRequest(request);\n    var method = superagent.del;\n    HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP PUT request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */ HttpManager.put = function(request, callback) {\n    var options = _getParametersFromRequest(request);\n    var method = superagent.put;\n    HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\nmodule.exports = HttpManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL2h0dHAtbWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDLHdFQUN2QixFQUFFQyxZQUFZLEVBQ1pDLFdBQVcsRUFDWEMsa0JBQWtCLEVBQ2xCQyx5QkFBeUIsRUFDekJDLGlCQUFpQixFQUNsQixHQUFJTCxtQkFBT0EsQ0FBQztBQUVmLElBQUlNLGNBQWMsQ0FBQztBQUVuQixtREFBbUQsR0FDbkQsSUFBSUMsNEJBQTRCLFNBQVNDLE9BQU87SUFDOUMsSUFBSUMsVUFBVSxDQUFDO0lBRWYsSUFBSUQsUUFBUUUsa0JBQWtCLElBQUk7UUFDaENELFFBQVFFLEtBQUssR0FBR0gsUUFBUUUsa0JBQWtCO0lBQzVDO0lBRUEsSUFBSUYsUUFBUUksVUFBVSxNQUFNSixRQUFRSSxVQUFVLEVBQUUsQ0FBQyxlQUFlLEtBQUssb0JBQW9CO1FBQ3ZGSCxRQUFRSSxJQUFJLEdBQUdDLEtBQUtDLFNBQVMsQ0FBQ1AsUUFBUVEsaUJBQWlCO0lBQ3pELE9BQU8sSUFBSVIsUUFBUVEsaUJBQWlCLElBQUk7UUFDdENQLFFBQVFJLElBQUksR0FBR0wsUUFBUVEsaUJBQWlCO0lBQzFDO0lBRUEsSUFBSVIsUUFBUUksVUFBVSxJQUFJO1FBQ3hCSCxRQUFRUSxPQUFPLEdBQUdULFFBQVFJLFVBQVU7SUFDdEM7SUFDQSxPQUFPSDtBQUNUO0FBRUEsSUFBSVMsV0FBVyxTQUFTQyxRQUFRO0lBQzlCLElBQUksT0FBT0EsU0FBU0MsSUFBSSxLQUFLLFlBQVlELFNBQVNDLElBQUksQ0FBQ0MsS0FBSyxJQUFJLE9BQU9GLFNBQVNDLElBQUksQ0FBQ0MsS0FBSyxLQUFLLFlBQVlGLFNBQVNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxNQUFNLEVBQUU7UUFDckksT0FBTyxJQUFJakIsa0JBQWtCYyxTQUFTQyxJQUFJLEVBQUVELFNBQVNGLE9BQU8sRUFBRUUsU0FBU0ksVUFBVTtJQUNuRjtJQUVBLElBQUksT0FBT0osU0FBU0MsSUFBSSxLQUFLLFlBQVlELFNBQVNDLElBQUksQ0FBQ0MsS0FBSyxJQUFJLE9BQU9GLFNBQVNDLElBQUksQ0FBQ0MsS0FBSyxLQUFLLFVBQVU7UUFDdkcsT0FBTyxJQUFJbEIsbUJBQW1CZ0IsU0FBU0MsSUFBSSxFQUFFRCxTQUFTRixPQUFPLEVBQUVFLFNBQVNJLFVBQVU7SUFDcEY7SUFFQSxJQUFJLE9BQU9KLFNBQVNDLElBQUksS0FBSyxZQUFZRCxTQUFTQyxJQUFJLENBQUNDLEtBQUssSUFBSSxPQUFPRixTQUFTQyxJQUFJLENBQUNDLEtBQUssS0FBSyxVQUFVO1FBQ3ZHLE9BQU8sSUFBSWpCLDBCQUEwQmUsU0FBU0MsSUFBSSxFQUFFRCxTQUFTRixPQUFPLEVBQUVFLFNBQVNJLFVBQVU7SUFDM0Y7SUFFQSwwREFBMEQsR0FDMUQsT0FBTyxJQUFJckIsWUFBWWlCLFNBQVNDLElBQUksRUFBRUQsU0FBU0YsT0FBTyxFQUFFRSxTQUFTSSxVQUFVLEVBQUVKLFNBQVNDLElBQUk7QUFDNUY7QUFFQSxtQ0FBbUMsR0FDbkNkLFlBQVlrQixZQUFZLEdBQUcsU0FBU0MsTUFBTSxFQUFFaEIsT0FBTyxFQUFFaUIsR0FBRyxFQUFFQyxRQUFRO0lBQ2hFLElBQUlDLE1BQU1ILE9BQU9JLElBQUksQ0FBQzlCLFlBQVkyQjtJQUVsQyxJQUFJakIsUUFBUUUsS0FBSyxFQUFFO1FBQ2pCaUIsSUFBSWpCLEtBQUssQ0FBQ0YsUUFBUUUsS0FBSztJQUN6QjtJQUVBLElBQUlGLFFBQVFRLE9BQU8sRUFBRTtRQUNuQlcsSUFBSUUsR0FBRyxDQUFDckIsUUFBUVEsT0FBTztJQUN6QjtJQUVBLElBQUlSLFFBQVFJLElBQUksRUFBRTtRQUNoQmUsSUFBSUcsSUFBSSxDQUFDdEIsUUFBUUksSUFBSTtJQUN2QjtJQUVBZSxJQUFJSSxHQUFHLENBQUMsU0FBU0MsR0FBRyxFQUFFZCxRQUFRO1FBQzVCLElBQUljLEtBQUs7WUFDUCxJQUFJQSxJQUFJQyxPQUFPLEVBQUU7Z0JBQ2YsT0FBT1AsU0FBUyxJQUFJMUI7WUFDdEIsT0FBTyxJQUFJZ0MsSUFBSWQsUUFBUSxFQUFFO2dCQUN2QixPQUFPUSxTQUFTVCxTQUFTZSxJQUFJZCxRQUFRO1lBQ3ZDLE9BQU87Z0JBQ0wsT0FBT1EsU0FBU007WUFDbEI7UUFDRjtRQUVBLE9BQU9OLFNBQVMsTUFBTTtZQUNwQlAsTUFBTUQsU0FBU0MsSUFBSTtZQUNuQkgsU0FBU0UsU0FBU0YsT0FBTztZQUN6Qk0sWUFBWUosU0FBU0ksVUFBVTtRQUNqQztJQUNGO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ0RqQixZQUFZNkIsR0FBRyxHQUFHLFNBQVMzQixPQUFPLEVBQUVtQixRQUFRO0lBQzFDLElBQUlsQixVQUFVRiwwQkFBMEJDO0lBQ3hDLElBQUlpQixTQUFTMUIsV0FBV29DLEdBQUc7SUFFM0I3QixZQUFZa0IsWUFBWSxDQUFDQyxRQUFRaEIsU0FBU0QsUUFBUTRCLE1BQU0sSUFBSVQ7QUFDOUQ7QUFFQTs7OztDQUlDLEdBQ0RyQixZQUFZK0IsSUFBSSxHQUFHLFNBQVM3QixPQUFPLEVBQUVtQixRQUFRO0lBQzNDLElBQUlsQixVQUFVRiwwQkFBMEJDO0lBQ3hDLElBQUlpQixTQUFTMUIsV0FBV3NDLElBQUk7SUFFNUIvQixZQUFZa0IsWUFBWSxDQUFDQyxRQUFRaEIsU0FBU0QsUUFBUTRCLE1BQU0sSUFBSVQ7QUFDOUQ7QUFFQTs7OztDQUlDLEdBQ0RyQixZQUFZZ0MsR0FBRyxHQUFHLFNBQVM5QixPQUFPLEVBQUVtQixRQUFRO0lBQzFDLElBQUlsQixVQUFVRiwwQkFBMEJDO0lBQ3hDLElBQUlpQixTQUFTMUIsV0FBV3VDLEdBQUc7SUFFM0JoQyxZQUFZa0IsWUFBWSxDQUFDQyxRQUFRaEIsU0FBU0QsUUFBUTRCLE1BQU0sSUFBSVQ7QUFDOUQ7QUFFQTs7OztDQUlDLEdBQ0RyQixZQUFZaUMsR0FBRyxHQUFHLFNBQVMvQixPQUFPLEVBQUVtQixRQUFRO0lBQzFDLElBQUlsQixVQUFVRiwwQkFBMEJDO0lBQ3hDLElBQUlpQixTQUFTMUIsV0FBV3dDLEdBQUc7SUFFM0JqQyxZQUFZa0IsWUFBWSxDQUFDQyxRQUFRaEIsU0FBU0QsUUFBUTRCLE1BQU0sSUFBSVQ7QUFDOUQ7QUFFQWEsT0FBT0MsT0FBTyxHQUFHbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1zb25nLXRyYW5zbGF0aW9uLy4vbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy9odHRwLW1hbmFnZXIuanM/OGU3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBzdXBlcmFnZW50ID0gcmVxdWlyZSgnc3VwZXJhZ2VudCcpLFxuICB7IFRpbWVvdXRFcnJvciwgXG4gICAgV2ViYXBpRXJyb3IsIFxuICAgIFdlYmFwaVJlZ3VsYXJFcnJvciwgXG4gICAgV2ViYXBpQXV0aGVudGljYXRpb25FcnJvcixcbiAgICBXZWJhcGlQbGF5ZXJFcnJvciBcbiAgfSA9ICByZXF1aXJlKCcuL3Jlc3BvbnNlLWVycm9yJyk7XG5cbnZhciBIdHRwTWFuYWdlciA9IHt9O1xuXG4vKiBDcmVhdGUgc3VwZXJhZ2VudCBvcHRpb25zIGZyb20gdGhlIGJhc2UgcmVxdWVzdCAqL1xudmFyIF9nZXRQYXJhbWV0ZXJzRnJvbVJlcXVlc3QgPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gIHZhciBvcHRpb25zID0ge307XG5cbiAgaWYgKHJlcXVlc3QuZ2V0UXVlcnlQYXJhbWV0ZXJzKCkpIHtcbiAgICBvcHRpb25zLnF1ZXJ5ID0gcmVxdWVzdC5nZXRRdWVyeVBhcmFtZXRlcnMoKTtcbiAgfVxuXG4gIGlmIChyZXF1ZXN0LmdldEhlYWRlcnMoKSAmJiByZXF1ZXN0LmdldEhlYWRlcnMoKVsnQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJykge1xuICAgIG9wdGlvbnMuZGF0YSA9IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QuZ2V0Qm9keVBhcmFtZXRlcnMoKSk7XG4gIH0gZWxzZSBpZiAocmVxdWVzdC5nZXRCb2R5UGFyYW1ldGVycygpKSB7XG4gICAgb3B0aW9ucy5kYXRhID0gcmVxdWVzdC5nZXRCb2R5UGFyYW1ldGVycygpO1xuICB9XG5cbiAgaWYgKHJlcXVlc3QuZ2V0SGVhZGVycygpKSB7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0gcmVxdWVzdC5nZXRIZWFkZXJzKCk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG52YXIgX3RvRXJyb3IgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICBpZiAodHlwZW9mIHJlc3BvbnNlLmJvZHkgPT09ICdvYmplY3QnICYmIHJlc3BvbnNlLmJvZHkuZXJyb3IgJiYgdHlwZW9mIHJlc3BvbnNlLmJvZHkuZXJyb3IgPT09ICdvYmplY3QnICYmIHJlc3BvbnNlLmJvZHkuZXJyb3IucmVhc29uKSB7XG4gICAgcmV0dXJuIG5ldyBXZWJhcGlQbGF5ZXJFcnJvcihyZXNwb25zZS5ib2R5LCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVzcG9uc2UuYm9keSA9PT0gJ29iamVjdCcgJiYgcmVzcG9uc2UuYm9keS5lcnJvciAmJiB0eXBlb2YgcmVzcG9uc2UuYm9keS5lcnJvciA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbmV3IFdlYmFwaVJlZ3VsYXJFcnJvcihyZXNwb25zZS5ib2R5LCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVzcG9uc2UuYm9keSA9PT0gJ29iamVjdCcgJiYgcmVzcG9uc2UuYm9keS5lcnJvciAmJiB0eXBlb2YgcmVzcG9uc2UuYm9keS5lcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbmV3IFdlYmFwaUF1dGhlbnRpY2F0aW9uRXJyb3IocmVzcG9uc2UuYm9keSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XG4gIH1cbiAgXG4gIC8qIE90aGVyIHR5cGUgb2YgZXJyb3IsIG9yIHVuaGFuZGxlZCBXZWIgQVBJIGVycm9yIGZvcm1hdCAqL1xuICByZXR1cm4gbmV3IFdlYmFwaUVycm9yKHJlc3BvbnNlLmJvZHksIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLnN0YXR1c0NvZGUsIHJlc3BvbnNlLmJvZHkpO1xufTtcblxuLyogTWFrZSB0aGUgcmVxdWVzdCB0byB0aGUgV2ViIEFQSSAqL1xuSHR0cE1hbmFnZXIuX21ha2VSZXF1ZXN0ID0gZnVuY3Rpb24obWV0aG9kLCBvcHRpb25zLCB1cmksIGNhbGxiYWNrKSB7XG4gIHZhciByZXEgPSBtZXRob2QuYmluZChzdXBlcmFnZW50KSh1cmkpO1xuXG4gIGlmIChvcHRpb25zLnF1ZXJ5KSB7XG4gICAgcmVxLnF1ZXJ5KG9wdGlvbnMucXVlcnkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGVhZGVycykge1xuICAgIHJlcS5zZXQob3B0aW9ucy5oZWFkZXJzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICByZXEuc2VuZChvcHRpb25zLmRhdGEpO1xuICB9XG5cbiAgcmVxLmVuZChmdW5jdGlvbihlcnIsIHJlc3BvbnNlKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgaWYgKGVyci50aW1lb3V0KSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgVGltZW91dEVycm9yKCkpO1xuICAgICAgfSBlbHNlIGlmIChlcnIucmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKF90b0Vycm9yKGVyci5yZXNwb25zZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHtcbiAgICAgIGJvZHk6IHJlc3BvbnNlLmJvZHksXG4gICAgICBoZWFkZXJzOiByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzQ29kZVxuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogTWFrZSBhIEhUVFAgR0VUIHJlcXVlc3QuXG4gKiBAcGFyYW0ge0Jhc2VSZXF1ZXN0fSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuSHR0cE1hbmFnZXIuZ2V0ID0gZnVuY3Rpb24ocmVxdWVzdCwgY2FsbGJhY2spIHtcbiAgdmFyIG9wdGlvbnMgPSBfZ2V0UGFyYW1ldGVyc0Zyb21SZXF1ZXN0KHJlcXVlc3QpO1xuICB2YXIgbWV0aG9kID0gc3VwZXJhZ2VudC5nZXQ7XG5cbiAgSHR0cE1hbmFnZXIuX21ha2VSZXF1ZXN0KG1ldGhvZCwgb3B0aW9ucywgcmVxdWVzdC5nZXRVUkkoKSwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgSFRUUCBQT1NUIHJlcXVlc3QuXG4gKiBAcGFyYW0ge0Jhc2VSZXF1ZXN0fSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuSHR0cE1hbmFnZXIucG9zdCA9IGZ1bmN0aW9uKHJlcXVlc3QsIGNhbGxiYWNrKSB7XG4gIHZhciBvcHRpb25zID0gX2dldFBhcmFtZXRlcnNGcm9tUmVxdWVzdChyZXF1ZXN0KTtcbiAgdmFyIG1ldGhvZCA9IHN1cGVyYWdlbnQucG9zdDtcblxuICBIdHRwTWFuYWdlci5fbWFrZVJlcXVlc3QobWV0aG9kLCBvcHRpb25zLCByZXF1ZXN0LmdldFVSSSgpLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIE1ha2UgYSBIVFRQIERFTEVURSByZXF1ZXN0LlxuICogQHBhcmFtIHtCYXNlUmVxdWVzdH0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cbkh0dHBNYW5hZ2VyLmRlbCA9IGZ1bmN0aW9uKHJlcXVlc3QsIGNhbGxiYWNrKSB7XG4gIHZhciBvcHRpb25zID0gX2dldFBhcmFtZXRlcnNGcm9tUmVxdWVzdChyZXF1ZXN0KTtcbiAgdmFyIG1ldGhvZCA9IHN1cGVyYWdlbnQuZGVsO1xuXG4gIEh0dHBNYW5hZ2VyLl9tYWtlUmVxdWVzdChtZXRob2QsIG9wdGlvbnMsIHJlcXVlc3QuZ2V0VVJJKCksIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIEhUVFAgUFVUIHJlcXVlc3QuXG4gKiBAcGFyYW0ge0Jhc2VSZXF1ZXN0fSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuSHR0cE1hbmFnZXIucHV0ID0gZnVuY3Rpb24ocmVxdWVzdCwgY2FsbGJhY2spIHtcbiAgdmFyIG9wdGlvbnMgPSBfZ2V0UGFyYW1ldGVyc0Zyb21SZXF1ZXN0KHJlcXVlc3QpO1xuICB2YXIgbWV0aG9kID0gc3VwZXJhZ2VudC5wdXQ7XG5cbiAgSHR0cE1hbmFnZXIuX21ha2VSZXF1ZXN0KG1ldGhvZCwgb3B0aW9ucywgcmVxdWVzdC5nZXRVUkkoKSwgY2FsbGJhY2spO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIdHRwTWFuYWdlcjsiXSwibmFtZXMiOlsic3VwZXJhZ2VudCIsInJlcXVpcmUiLCJUaW1lb3V0RXJyb3IiLCJXZWJhcGlFcnJvciIsIldlYmFwaVJlZ3VsYXJFcnJvciIsIldlYmFwaUF1dGhlbnRpY2F0aW9uRXJyb3IiLCJXZWJhcGlQbGF5ZXJFcnJvciIsIkh0dHBNYW5hZ2VyIiwiX2dldFBhcmFtZXRlcnNGcm9tUmVxdWVzdCIsInJlcXVlc3QiLCJvcHRpb25zIiwiZ2V0UXVlcnlQYXJhbWV0ZXJzIiwicXVlcnkiLCJnZXRIZWFkZXJzIiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRCb2R5UGFyYW1ldGVycyIsImhlYWRlcnMiLCJfdG9FcnJvciIsInJlc3BvbnNlIiwiYm9keSIsImVycm9yIiwicmVhc29uIiwic3RhdHVzQ29kZSIsIl9tYWtlUmVxdWVzdCIsIm1ldGhvZCIsInVyaSIsImNhbGxiYWNrIiwicmVxIiwiYmluZCIsInNldCIsInNlbmQiLCJlbmQiLCJlcnIiLCJ0aW1lb3V0IiwiZ2V0IiwiZ2V0VVJJIiwicG9zdCIsImRlbCIsInB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/http-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/response-error.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/response-error.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("/* Timeout */ class NamedError extends Error {\n    get name() {\n        return this.constructor.name;\n    }\n}\nclass TimeoutError extends NamedError {\n    constructor(){\n        const message = \"A timeout occurred while communicating with Spotify's Web API.\";\n        super(message);\n    }\n}\n/* Web API Parent and fallback error */ class WebapiError extends NamedError {\n    constructor(body, headers, statusCode, message){\n        super(message);\n        this.body = body;\n        this.headers = headers;\n        this.statusCode = statusCode;\n    }\n}\n/** \n * Regular Error\n * { status : <integer>, message : <string> }\n */ class WebapiRegularError extends WebapiError {\n    constructor(body, headers, statusCode){\n        const message = \"An error occurred while communicating with Spotify's Web API.\\n\" + \"Details: \" + body.error.message + \".\";\n        super(body, headers, statusCode, message);\n    }\n}\n/**\n * Authentication Error \n * { error : <string>, error_description : <string> }\n */ class WebapiAuthenticationError extends WebapiError {\n    constructor(body, headers, statusCode){\n        const message = \"An authentication error occurred while communicating with Spotify's Web API.\\n\" + \"Details: \" + body.error + (body.error_description ? \" \" + body.error_description + \".\" : \".\");\n        super(body, headers, statusCode, message);\n    }\n}\n/**\n * Player Error \n * { status : <integer>, message : <string>, reason : <string> }\n */ class WebapiPlayerError extends WebapiError {\n    constructor(body, headers, statusCode){\n        const message = \"An error occurred while communicating with Spotify's Web API.\\n\" + \"Details: \" + body.error.message + (body.error.reason ? \" \" + body.error.reason + \".\" : \".\");\n        super(body, headers, statusCode, message);\n    }\n}\nmodule.exports = {\n    WebapiError,\n    TimeoutError,\n    WebapiRegularError,\n    WebapiAuthenticationError,\n    WebapiPlayerError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1zb25nLXRyYW5zbGF0aW9uLy4vbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy9yZXNwb25zZS1lcnJvci5qcz9lM2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIFRpbWVvdXQgKi9cbmNsYXNzIE5hbWVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH0gIFxufVxuXG5jbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBOYW1lZEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9ICdBIHRpbWVvdXQgb2NjdXJyZWQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIFNwb3RpZnlcXCdzIFdlYiBBUEkuJztcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxuXG59XG5cbi8qIFdlYiBBUEkgUGFyZW50IGFuZCBmYWxsYmFjayBlcnJvciAqL1xuY2xhc3MgV2ViYXBpRXJyb3IgZXh0ZW5kcyBOYW1lZEVycm9yIHtcbiAgY29uc3RydWN0b3IoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSwgbWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICB9XG5cbn1cblxuLyoqIFxuICogUmVndWxhciBFcnJvclxuICogeyBzdGF0dXMgOiA8aW50ZWdlcj4sIG1lc3NhZ2UgOiA8c3RyaW5nPiB9XG4gKi9cbmNsYXNzIFdlYmFwaVJlZ3VsYXJFcnJvciBleHRlbmRzIFdlYmFwaUVycm9yIHtcbiAgY29uc3RydWN0b3IoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIFNwb3RpZnlcXCdzIFdlYiBBUEkuXFxuJyArXG4gICAgJ0RldGFpbHM6ICcgKyBib2R5LmVycm9yLm1lc3NhZ2UgKyAnLic7XG5cbiAgICBzdXBlcihib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlLCBtZXNzYWdlKTtcbiAgfVxufVxuXG4vKipcbiAqIEF1dGhlbnRpY2F0aW9uIEVycm9yIFxuICogeyBlcnJvciA6IDxzdHJpbmc+LCBlcnJvcl9kZXNjcmlwdGlvbiA6IDxzdHJpbmc+IH1cbiAqL1xuY2xhc3MgV2ViYXBpQXV0aGVudGljYXRpb25FcnJvciBleHRlbmRzIFdlYmFwaUVycm9yIHtcbiAgY29uc3RydWN0b3IoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnQW4gYXV0aGVudGljYXRpb24gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIFNwb3RpZnlcXCdzIFdlYiBBUEkuXFxuJyArXG4gICAgJ0RldGFpbHM6ICcgKyBib2R5LmVycm9yICsgKGJvZHkuZXJyb3JfZGVzY3JpcHRpb24gPyAnICcgKyBib2R5LmVycm9yX2Rlc2NyaXB0aW9uICsgJy4nIDogJy4nKTtcblxuICAgIHN1cGVyKGJvZHksIGhlYWRlcnMsIHN0YXR1c0NvZGUsIG1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogUGxheWVyIEVycm9yIFxuICogeyBzdGF0dXMgOiA8aW50ZWdlcj4sIG1lc3NhZ2UgOiA8c3RyaW5nPiwgcmVhc29uIDogPHN0cmluZz4gfVxuICovXG5jbGFzcyBXZWJhcGlQbGF5ZXJFcnJvciBleHRlbmRzIFdlYmFwaUVycm9yIHtcbiAgY29uc3RydWN0b3IoYm9keSwgaGVhZGVycywgc3RhdHVzQ29kZSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIFNwb3RpZnlcXCdzIFdlYiBBUEkuXFxuJyArXG4gICAgJ0RldGFpbHM6ICcgKyBib2R5LmVycm9yLm1lc3NhZ2UgKyAoYm9keS5lcnJvci5yZWFzb24gPyAnICcgKyBib2R5LmVycm9yLnJlYXNvbiArICcuJyA6ICcuJyk7XG5cbiAgICBzdXBlcihib2R5LCBoZWFkZXJzLCBzdGF0dXNDb2RlLCBtZXNzYWdlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgV2ViYXBpRXJyb3IsIFRpbWVvdXRFcnJvciwgV2ViYXBpUmVndWxhckVycm9yLCBXZWJhcGlBdXRoZW50aWNhdGlvbkVycm9yLCBXZWJhcGlQbGF5ZXJFcnJvciB9OyJdLCJuYW1lcyI6WyJOYW1lZEVycm9yIiwiRXJyb3IiLCJuYW1lIiwiY29uc3RydWN0b3IiLCJUaW1lb3V0RXJyb3IiLCJtZXNzYWdlIiwiV2ViYXBpRXJyb3IiLCJib2R5IiwiaGVhZGVycyIsInN0YXR1c0NvZGUiLCJXZWJhcGlSZWd1bGFyRXJyb3IiLCJlcnJvciIsIldlYmFwaUF1dGhlbnRpY2F0aW9uRXJyb3IiLCJlcnJvcl9kZXNjcmlwdGlvbiIsIldlYmFwaVBsYXllckVycm9yIiwicmVhc29uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxHQUNYLE1BQU1BLG1CQUFtQkM7SUFDdkIsSUFBSUMsT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDQyxXQUFXLENBQUNELElBQUk7SUFDOUI7QUFDRjtBQUVBLE1BQU1FLHFCQUFxQko7SUFDekJHLGFBQWM7UUFDWixNQUFNRSxVQUFVO1FBQ2hCLEtBQUssQ0FBQ0E7SUFDUjtBQUVGO0FBRUEscUNBQXFDLEdBQ3JDLE1BQU1DLG9CQUFvQk47SUFDeEJHLFlBQVlJLElBQUksRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVKLE9BQU8sQ0FBRTtRQUM5QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRSxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3BCO0FBRUY7QUFFQTs7O0NBR0MsR0FDRCxNQUFNQywyQkFBMkJKO0lBQy9CSCxZQUFZSSxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxDQUFFO1FBQ3JDLE1BQU1KLFVBQVUsb0VBQ2hCLGNBQWNFLEtBQUtJLEtBQUssQ0FBQ04sT0FBTyxHQUFHO1FBRW5DLEtBQUssQ0FBQ0UsTUFBTUMsU0FBU0MsWUFBWUo7SUFDbkM7QUFDRjtBQUVBOzs7Q0FHQyxHQUNELE1BQU1PLGtDQUFrQ047SUFDdENILFlBQVlJLElBQUksRUFBRUMsT0FBTyxFQUFFQyxVQUFVLENBQUU7UUFDckMsTUFBTUosVUFBVSxtRkFDaEIsY0FBY0UsS0FBS0ksS0FBSyxHQUFJSixDQUFBQSxLQUFLTSxpQkFBaUIsR0FBRyxNQUFNTixLQUFLTSxpQkFBaUIsR0FBRyxNQUFNLEdBQUU7UUFFNUYsS0FBSyxDQUFDTixNQUFNQyxTQUFTQyxZQUFZSjtJQUNuQztBQUNGO0FBRUE7OztDQUdDLEdBQ0QsTUFBTVMsMEJBQTBCUjtJQUM5QkgsWUFBWUksSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsQ0FBRTtRQUNyQyxNQUFNSixVQUFVLG9FQUNoQixjQUFjRSxLQUFLSSxLQUFLLENBQUNOLE9BQU8sR0FBSUUsQ0FBQUEsS0FBS0ksS0FBSyxDQUFDSSxNQUFNLEdBQUcsTUFBTVIsS0FBS0ksS0FBSyxDQUFDSSxNQUFNLEdBQUcsTUFBTSxHQUFFO1FBRTFGLEtBQUssQ0FBQ1IsTUFBTUMsU0FBU0MsWUFBWUo7SUFDbkM7QUFDRjtBQUVBVyxPQUFPQyxPQUFPLEdBQUc7SUFBRVg7SUFBYUY7SUFBY007SUFBb0JFO0lBQTJCRTtBQUFrQiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9zcG90aWZ5LXdlYi1hcGktbm9kZS9zcmMvcmVzcG9uc2UtZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/response-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/server-methods.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/server-methods.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar AuthenticationRequest = __webpack_require__(/*! ./authentication-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/authentication-request.js\");\nvar HttpManager = __webpack_require__(/*! ./http-manager */ \"(rsc)/./node_modules/spotify-web-api-node/src/http-manager.js\");\nmodule.exports = {\n    /**\n   * Retrieve a URL where the user can give the application permissions.\n   * @param {string[]} scopes The scopes corresponding to the permissions the application needs.\n   * @param {string} state A parameter that you can use to maintain a value between the request and the callback to redirect_uri.It is useful to prevent CSRF exploits.\n   * @param {boolean} showDialog A parameter that you can use to force the user to approve the app on each login rather than being automatically redirected.\n   * @param {string} responseType An optional parameter that you can use to specify the code response based on the authentication type - can be set to 'code' or 'token'. Default 'code' to ensure backwards compatability.\n   * @returns {string} The URL where the user can give application permissions.\n   */ createAuthorizeURL: function(scopes, state, showDialog, responseType = \"code\") {\n        return AuthenticationRequest.builder().withPath(\"/authorize\").withQueryParameters({\n            client_id: this.getClientId(),\n            response_type: responseType,\n            redirect_uri: this.getRedirectURI(),\n            scope: scopes.join(\"%20\"),\n            state: state,\n            show_dialog: showDialog && !!showDialog\n        }).build().getURL();\n    },\n    /**\n   * Request an access token using the Client Credentials flow.\n   * Requires that client ID and client secret has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          token type and time to expiration. If rejected, it contains an error object. Not returned if a callback is given.\n   */ clientCredentialsGrant: function(callback) {\n        return AuthenticationRequest.builder().withPath(\"/api/token\").withBodyParameters({\n            grant_type: \"client_credentials\"\n        }).withHeaders({\n            Authorization: \"Basic \" + new Buffer(this.getClientId() + \":\" + this.getClientSecret()).toString(\"base64\"),\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Request an access token using the Authorization Code flow.\n   * Requires that client ID, client secret, and redirect URI has been set previous to the call.\n   * @param {string} code The authorization code returned in the callback in the Authorization Code flow.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          refresh token, token type and time to expiration. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */ authorizationCodeGrant: function(code, callback) {\n        return AuthenticationRequest.builder().withPath(\"/api/token\").withBodyParameters({\n            grant_type: \"authorization_code\",\n            redirect_uri: this.getRedirectURI(),\n            code: code,\n            client_id: this.getClientId(),\n            client_secret: this.getClientSecret()\n        }).withHeaders({\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Refresh the access token given that it hasn't expired.\n   * Requires that client ID, client secret and refresh token has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing the\n   *          access token, time to expiration and token type. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */ refreshAccessToken: function(callback) {\n        return AuthenticationRequest.builder().withPath(\"/api/token\").withBodyParameters({\n            grant_type: \"refresh_token\",\n            refresh_token: this.getRefreshToken()\n        }).withHeaders({\n            Authorization: \"Basic \" + new Buffer(this.getClientId() + \":\" + this.getClientSecret()).toString(\"base64\"),\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }).build().execute(HttpManager.post, callback);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/server-methods.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/server.js":
/*!*********************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/server.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var SpotifyWebApi = __webpack_require__(/*! ./spotify-web-api */ \"(rsc)/./node_modules/spotify-web-api-node/src/spotify-web-api.js\");\nvar ServerMethods = __webpack_require__(/*! ./server-methods */ \"(rsc)/./node_modules/spotify-web-api-node/src/server-methods.js\");\nSpotifyWebApi._addMethods(ServerMethods);\nmodule.exports = SpotifyWebApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3NlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBQzVCLElBQUlDLGdCQUFnQkQsbUJBQU9BLENBQUM7QUFDNUJELGNBQWNHLFdBQVcsQ0FBQ0Q7QUFDMUJFLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1zb25nLXRyYW5zbGF0aW9uLy4vbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy9zZXJ2ZXIuanM/N2FlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3BvdGlmeVdlYkFwaSA9IHJlcXVpcmUoJy4vc3BvdGlmeS13ZWItYXBpJyk7XG52YXIgU2VydmVyTWV0aG9kcyA9IHJlcXVpcmUoJy4vc2VydmVyLW1ldGhvZHMnKTtcblNwb3RpZnlXZWJBcGkuX2FkZE1ldGhvZHMoU2VydmVyTWV0aG9kcyk7XG5tb2R1bGUuZXhwb3J0cyA9IFNwb3RpZnlXZWJBcGk7XG4iXSwibmFtZXMiOlsiU3BvdGlmeVdlYkFwaSIsInJlcXVpcmUiLCJTZXJ2ZXJNZXRob2RzIiwiX2FkZE1ldGhvZHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/spotify-web-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/spotify-web-api.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar AuthenticationRequest = __webpack_require__(/*! ./authentication-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/authentication-request.js\"), WebApiRequest = __webpack_require__(/*! ./webapi-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/webapi-request.js\"), HttpManager = __webpack_require__(/*! ./http-manager */ \"(rsc)/./node_modules/spotify-web-api-node/src/http-manager.js\");\nfunction SpotifyWebApi(credentials) {\n    this._credentials = credentials || {};\n}\nSpotifyWebApi.prototype = {\n    setCredentials: function(credentials) {\n        for(var key in credentials){\n            if (credentials.hasOwnProperty(key)) {\n                this._credentials[key] = credentials[key];\n            }\n        }\n    },\n    getCredentials: function() {\n        return this._credentials;\n    },\n    resetCredentials: function() {\n        this._credentials = null;\n    },\n    setClientId: function(clientId) {\n        this._setCredential(\"clientId\", clientId);\n    },\n    setClientSecret: function(clientSecret) {\n        this._setCredential(\"clientSecret\", clientSecret);\n    },\n    setAccessToken: function(accessToken) {\n        this._setCredential(\"accessToken\", accessToken);\n    },\n    setRefreshToken: function(refreshToken) {\n        this._setCredential(\"refreshToken\", refreshToken);\n    },\n    setRedirectURI: function(redirectUri) {\n        this._setCredential(\"redirectUri\", redirectUri);\n    },\n    getRedirectURI: function() {\n        return this._getCredential(\"redirectUri\");\n    },\n    getClientId: function() {\n        return this._getCredential(\"clientId\");\n    },\n    getClientSecret: function() {\n        return this._getCredential(\"clientSecret\");\n    },\n    getAccessToken: function() {\n        return this._getCredential(\"accessToken\");\n    },\n    getRefreshToken: function() {\n        return this._getCredential(\"refreshToken\");\n    },\n    resetClientId: function() {\n        this._resetCredential(\"clientId\");\n    },\n    resetClientSecret: function() {\n        this._resetCredential(\"clientSecret\");\n    },\n    resetAccessToken: function() {\n        this._resetCredential(\"accessToken\");\n    },\n    resetRefreshToken: function() {\n        this._resetCredential(\"refreshToken\");\n    },\n    resetRedirectURI: function() {\n        this._resetCredential(\"redirectUri\");\n    },\n    _setCredential: function(credentialKey, value) {\n        this._credentials = this._credentials || {};\n        this._credentials[credentialKey] = value;\n    },\n    _getCredential: function(credentialKey) {\n        if (!this._credentials) {\n            return;\n        } else {\n            return this._credentials[credentialKey];\n        }\n    },\n    _resetCredential: function(credentialKey) {\n        if (!this._credentials) {\n            return;\n        } else {\n            this._credentials[credentialKey] = null;\n        }\n    },\n    /**\n   * Look up a track.\n   * @param {string} trackId The track's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getTrack('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the track. Not returned if a callback is given.\n   */ getTrack: function(trackId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/tracks/\" + trackId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several tracks.\n   * @param {string[]} trackIds The IDs of the artists.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */ getTracks: function(trackIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/tracks\").withQueryParameters({\n            ids: trackIds.join(\",\")\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up an album.\n   * @param {string} albumId The album's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbum('0sNOF9WDwhWunNAHPD3Baj').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the album. Not returned if a callback is given.\n   */ getAlbum: function(albumId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/albums/\" + albumId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several albums.\n   * @param {string[]} albumIds The IDs of the albums.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbums(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the albums. Not returned if a callback is given.\n   */ getAlbums: function(albumIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/albums\").withQueryParameters({\n            ids: albumIds.join(\",\")\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up an artist.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example api.getArtist('1u7kkVrr14iBvrpYnZILJR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artist. Not returned if a callback is given.\n   */ getArtist: function(artistId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists/\" + artistId).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several artists.\n   * @param {string[]} artistIds The IDs of the artists.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */ getArtists: function(artistIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists\").withQueryParameters({\n            ids: artistIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Search for music entities of certain types.\n   * @param {string} query The search query.\n   * @param {string[]} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', 'track', 'show', and 'episode'.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example search('Abba', ['track', 'playlist'], { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ search: function(query, types, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/search/\").withQueryParameters({\n            type: types.join(\",\"),\n            q: query\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Search for an album.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchAlbums('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchAlbums: function(query, options, callback) {\n        return this.search(query, [\n            \"album\"\n        ], options, callback);\n    },\n    /**\n   * Search for an artist.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchArtists('David Bowie', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchArtists: function(query, options, callback) {\n        return this.search(query, [\n            \"artist\"\n        ], options, callback);\n    },\n    /**\n   * Search for a track.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchTracks('Mr. Brightside', { limit : 3, offset : 2 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchTracks: function(query, options, callback) {\n        return this.search(query, [\n            \"track\"\n        ], options, callback);\n    },\n    /**\n   * Search for playlists.\n   * @param {string} query The search query.\n   * @param {Object} options The possible options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchPlaylists('workout', { limit : 1, offset : 0 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchPlaylists: function(query, options, callback) {\n        return this.search(query, [\n            \"playlist\"\n        ], options, callback);\n    },\n    /**\n   * Get an artist's albums.\n   * @param {string} artistId The artist's ID.\n   * @options {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistAlbums('0oSGxfWSnnOXhD2fKuz2Gy', { album_type : 'album', country : 'GB', limit : 2, offset : 5 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the albums\n   *          for the given artist. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ getArtistAlbums: function(artistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists/\" + artistId + \"/albums\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the tracks of an album.\n   * @param albumId the album's ID.\n   * @options {Object} [options] The possible options, e.g. limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    tracks in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */ getAlbumTracks: function(albumId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/albums/\" + albumId + \"/tracks\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get an artist's top tracks.\n   * @param {string} artistId The artist's ID.\n   * @param {string} country The country/territory where the tracks are most popular. (format: ISO 3166-1 alpha-2)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          artist's top tracks in the given country. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ getArtistTopTracks: function(artistId, country, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists/\" + artistId + \"/top-tracks\").withQueryParameters({\n            country: country\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get related artists.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistRelatedArtists('0oSGxfWSnnOXhD2fKuz2Gy').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          related artists. If the promise is rejected, it contains an error object. Not returned if a callback is given.\n   */ getArtistRelatedArtists: function(artistId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/artists/\" + artistId + \"/related-artists\").build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get information about a user.\n   * @param userId The user ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUser('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getUser: function(userId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/users/\" + encodeURIComponent(userId)).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get information about the user that has signed in (the current user).\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getMe().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. The amount of information\n   *          depends on the permissions given by the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getMe: function(callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me\").build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get a user's playlists.\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUserPlaylists('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of playlists. If rejected, it contains an error object. Not returned if a callback is given.\n   */ getUserPlaylists: function(userId, options, callback) {\n        var path;\n        if (typeof userId === \"string\") {\n            path = \"/v1/users/\" + encodeURIComponent(userId) + \"/playlists\";\n        } else if (typeof userId === \"object\") {\n            callback = options;\n            options = userId;\n            path = \"/v1/me/playlists\";\n        } else {\n            path = \"/v1/me/playlists\";\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(path).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylist('3EsfV6XzCHU8SPNdbnFogK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */ getPlaylist: function(playlistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get tracks in a playlist.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] Optional options, such as fields.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylistTracks('3ktAYNcRHpazJ9qecm3ptn').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object that containing\n   * the tracks in the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */ getPlaylistTracks: function(playlistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Create a playlist.\n   * @param {string} [name] The name of the playlist.\n   * @param {Object} [options] The possible options, being description, collaborative and public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example createPlaylist('My playlist', {''description': 'My description', 'collaborative' : false, 'public': true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing information about the\n   *          created playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */ createPlaylist: function(name, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/playlists\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            name: name\n        }, options).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Follow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, currently only public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ followPlaylist: function(playlistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/followers\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(options).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Unfollow a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ unfollowPlaylist: function(playlistId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/followers\").build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Change playlist details.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, e.g. name, public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example changePlaylistDetails('3EsfV6XzCHU8SPNdbnFogK', {name: 'New name', public: true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ changePlaylistDetails: function(playlistId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId).withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(options).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Replace the image used to represent a specific playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string} base64URI Base64 encoded JPEG image data, maximum payload size is 256 KB\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example uploadCustomPlaylistCoverImage('3EsfV6XzCHU8SPNdbnFogK', 'longbase64uri').then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ uploadCustomPlaylistCoverImage: function(playlistId, base64URI, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/images\").withHeaders({\n            \"Content-Type\": \"image/jpeg\"\n        }).withBodyParameters(base64URI).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Add tracks to a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {string[]} tracks URIs of the tracks to add to the playlist.\n   * @param {Object} [options] Options, position being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example addTracksToPlaylist('3EsfV6XzCHU8SPNdbnFogK',\n              '[\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]').then(...)\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ addTracksToPlaylist: function(playlistId, tracks, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withQueryParameters(options).withBodyParameters({\n            uris: tracks\n        }).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Remove tracks from a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} tracks An array of objects containing a property called uri with the track URI (String), and\n   * an optional property called positions (int[]), e.g. { uri : \"spotify:track:491rM2JN8KvmV6p0oDDuJT\", positions : [0, 15] }\n   * @param {Object} options Options, snapshot_id being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ removeTracksFromPlaylist: function(playlistId, tracks, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            tracks: tracks\n        }, options).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Remove tracks from a playlist by position instead of specifying the tracks' URIs.\n   * @param {string} playlistId The playlist's ID\n   * @param {int[]} positions The positions of the tracks in the playlist that should be removed\n   * @param {string} snapshot_id The snapshot ID, or version, of the playlist. Required\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ removeTracksFromPlaylistByPosition: function(playlistId, positions, snapshotId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            positions: positions,\n            snapshot_id: snapshotId\n        }).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Replace tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} uris An array of track URIs (strings)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ replaceTracksInPlaylist: function(playlistId, uris, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            uris: uris\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Reorder tracks in a playlist.\n   * @param {string} playlistId The playlist's ID\n   * @param {int} rangeStart The position of the first track to be reordered.\n   * @param {int} insertBefore The position where the tracks should be inserted.\n   * @param {Object} options Optional parameters, i.e. range_length and snapshot_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ reorderTracksInPlaylist: function(playlistId, rangeStart, insertBefore, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/playlists/\" + playlistId + \"/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            range_start: rangeStart,\n            insert_before: insertBefore\n        }, options).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getAudioFeaturesForTrack: function(trackId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/audio-features/\" + trackId).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioAnalysisForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio analysis. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getAudioAnalysisForTrack: function(trackId, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/audio-analysis/\" + trackId).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get audio features for multiple tracks identified by their unique Spotify ID.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTracks(['38P3Q4QcdjQALGF2Z92BmR', '2HO2bnoMrpnZUbUqiilLHi']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features for the tracks. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */ getAudioFeaturesForTracks: function(trackIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/audio-features\").withQueryParameters({\n            ids: trackIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getRecommendations({ min_energy: 0.4, seed_artists: ['6mfK6Q2tzLMEchAr0e9Uzu', '4DYFVNKZ1uixa6SQTvzQwJ'], min_popularity: 50 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of tracks and a list of seeds. If rejected, it contains an error object. Not returned if a callback is given.\n   */ getRecommendations: function(options, callback) {\n        var _opts = {};\n        var optionsOfTypeArray = [\n            \"seed_artists\",\n            \"seed_genres\",\n            \"seed_tracks\"\n        ];\n        for(var option in options){\n            if (options.hasOwnProperty(option)) {\n                if (optionsOfTypeArray.indexOf(option) !== -1 && Object.prototype.toString.call(options[option]) === \"[object Array]\") {\n                    _opts[option] = options[option].join(\",\");\n                } else {\n                    _opts[option] = options[option];\n                }\n            }\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/recommendations\").withQueryParameters(_opts).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAvailableGenreSeeds().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of available genres to be used as seeds for recommendations.\n   *          If rejected, it contains an error object. Not returned if a callback is given.\n   */ getAvailableGenreSeeds: function(callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/recommendations/available-genre-seeds\").build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve the tracks that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist track objects. Not returned if a callback is given.\n   */ getMySavedTracks: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/tracks\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the track ID in the request.\n   * The boolean value of true indicates that the track is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */ containsMySavedTracks: function(trackIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/tracks/contains\").withQueryParameters({\n            ids: trackIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Remove a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */ removeFromMySavedTracks: function(trackIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            ids: trackIds\n        }).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Add a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */ addToMySavedTracks: function(trackIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/tracks\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            ids: trackIds\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Remove an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */ removeFromMySavedAlbums: function(albumIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/albums\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(albumIds).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Add an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */ addToMySavedAlbums: function(albumIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/albums\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(albumIds).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Retrieve the albums that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist album objects. Not returned if a callback is given.\n   */ getMySavedAlbums: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/albums\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check if one or more albums is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the album ID in the request.\n   * The boolean value of true indicates that the album is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */ containsMySavedAlbums: function(albumIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/albums/contains\").withQueryParameters({\n            ids: albumIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the current user's top artists based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of artists,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyTopArtists: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/top/artists\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the current user's top tracks based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyTopTracks: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/top/tracks\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the Current User's Recently Played Tracks\n   * @param {Object} [options] Options, being type, after, limit, before.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of play history objects,\n   *          otherwise an error. Not returned if a callback is given. Note that the response will be empty\n   *          in case the user has enabled private session.\n   */ getMyRecentlyPlayedTracks: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/recently-played\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Add track or episode to device queue\n   * @param {string} [uri] uri of the track or episode to add\n   * @param {Object} [options] Options, being device_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */ addToQueue: function(uri, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/queue\").withQueryParameters({\n            uri: uri\n        }, options).build().execute(HttpManager.post, callback);\n    },\n    /** \n   * Get the Current User's Available Devices\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of device objects,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyDevices: function(callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/devices\").build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the Current User's Currently Playing Track.\n   * @param {Object} [options] Options, being market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyCurrentPlayingTrack: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/currently-playing\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get Information About The User's Current Playback State\n   * @param {Object} [options] Options, being market and additional_types.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */ getMyCurrentPlaybackState: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Transfer a User's Playback\n   * @param {string[]} [deviceIds] An _array_ containing a device ID on which playback should be started/transferred. \n   * (NOTE: The API is currently only supporting a single device ID.)\n   * @param {Object} [options] Options, the only one being 'play'.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ transferMyPlayback: function(deviceIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters({\n            device_ids: deviceIds\n        }, options).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Starts o Resumes the Current User's Playback\n   * @param {Object} [options] Options, being device_id, context_uri, offset, uris, position_ms.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example play({context_uri: 'spotify:album:5ht7ItJgpBH7W6vJ5BqpPr'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ play: function(options, callback) {\n        /*jshint camelcase: false */ var _options = options || {};\n        var queryParams = _options.device_id ? {\n            device_id: _options.device_id\n        } : null;\n        var postData = {};\n        [\n            \"context_uri\",\n            \"uris\",\n            \"offset\",\n            \"position_ms\"\n        ].forEach(function(field) {\n            if (field in _options) {\n                postData[field] = _options[field];\n            }\n        });\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/play\").withQueryParameters(queryParams).withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(postData).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Pauses the Current User's Playback\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example pause().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ pause: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/pause\")/*jshint camelcase: false */ .withQueryParameters(options && options.device_id ? {\n            device_id: options.device_id\n        } : null).withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Skip the Current User's Playback To Previous Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToPrevious().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ skipToPrevious: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/previous\").withQueryParameters(options && options.device_id ? {\n            device_id: options.device_id\n        } : null).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Skip the Current User's Playback To Next Track\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example skipToNext().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ skipToNext: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/next\").withQueryParameters(options && options.device_id ? {\n            device_id: options.device_id\n        } : null).build().execute(HttpManager.post, callback);\n    },\n    /**\n   * Seeks to the given position in the user’s currently playing track.\n   *\n   * @param {number} positionMs The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */ seek: function(positionMs, options, callback) {\n        var params = {\n            /* jshint camelcase: false */ position_ms: positionMs\n        };\n        if (options && \"device_id\" in options) {\n            /* jshint camelcase: false */ params.device_id = options.device_id;\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/seek\").withQueryParameters(params).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Set Repeat Mode On The Current User's Playback\n   * @param {string} [state] State (track, context, or off)\n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setRepeat('context', {}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ setRepeat: function(state, options, callback) {\n        var params = {\n            state: state\n        };\n        if (options && \"device_id\" in options) {\n            /* jshint camelcase: false */ params.device_id = options.device_id;\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/repeat\").withQueryParameters(params).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Set Shuffle Mode On The Current User's Playback\n   * @param {boolean} [state] State \n   * @param {Object} [options] Options, being device_id. If left empty will target the user's currently active device.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example setShuffle({state: 'false'}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an empty response,\n   *          otherwise an error. Not returned if a callback is given.\n   */ setShuffle: function(state, options, callback) {\n        var params = {\n            state: state\n        };\n        if (options && \"device_id\" in options) {\n            /* jshint camelcase: false */ params.device_id = options.device_id;\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/shuffle\").withQueryParameters(params).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Set the volume for the user’s current playback device.\n   * @param {number} volumePercent The volume to set. Must be a value from 0 to 100.\n   * @param {Object} options Options, being device_id. If left empty will target the user's currently active device.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */ setVolume: function(volumePercent, options, callback) {\n        var params = {\n            /* jshint camelcase: false */ volume_percent: volumePercent\n        };\n        if (options && \"device_id\" in options) {\n            /* jshint camelcase: false */ params.device_id = options.device_id;\n        }\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/player/volume\").withQueryParameters(params).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Add the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ followUsers: function(userIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            ids: userIds.join(\",\"),\n            type: \"user\"\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Add the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ followArtists: function(artistIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            ids: artistIds.join(\",\"),\n            type: \"artist\"\n        }).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Remove the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ unfollowUsers: function(userIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            ids: userIds.join(\",\"),\n            type: \"user\"\n        }).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Remove the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ unfollowArtists: function(artistIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            ids: artistIds.join(\",\"),\n            type: \"artist\"\n        }).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Check to see if the current user is following one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the users IDs in the request.\n   *          The boolean value of true indicates that the user is following that user, otherwise is not.\n   *          Not returned if a callback is given.\n   */ isFollowingUsers: function(userIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following/contains\").withQueryParameters({\n            ids: userIds.join(\",\"),\n            type: \"user\"\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the current user's followed artists.\n   * @param {Object} [options] Options, being after and limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */ getFollowedArtists: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following\").withQueryParameters({\n            type: \"artist\"\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check if users are following a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {String[]} User IDs of the following users\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an array of booleans. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */ areFollowingPlaylist: function(userId, playlistId, followerIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/users/\" + encodeURIComponent(userId) + \"/playlists/\" + playlistId + \"/followers/contains\").withQueryParameters({\n            ids: followerIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check to see if the current user is following one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the artists IDs in the request.\n   *          The boolean value of true indicates that the user is following that artist, otherwise is not.\n   *          Not returned if a callback is given.\n   */ isFollowingArtists: function(artistIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/following/contains\").withQueryParameters({\n            ids: artistIds.join(\",\"),\n            type: \"artist\"\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve new releases\n   * @param {Object} [options] Options, being country, limit and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */ getNewReleases: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/new-releases\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve featured playlists\n   * @param {Object} [options] Options, being country, locale, timestamp, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * featured playlists. Not returned if a callback is given.\n   */ getFeaturedPlaylists: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/featured-playlists\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve a list of categories used to tag items in Spotify (e.g. in the 'Browse' tab)\n   * @param {Object} [options] Options, being country, locale, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object of categories.\n   * Not returned if a callback is given.\n   */ getCategories: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/categories\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve a category.\n   * @param {string} categoryId The id of the category to retrieve.\n   * @param {Object} [options] Options, being country, locale.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a category object.\n   * Not returned if a callback is given.\n   */ getCategory: function(categoryId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/categories/\" + categoryId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Retrieve playlists for a category.\n   * @param {string} categoryId The id of the category to retrieve playlists for.\n   * @param {Object} [options] Options, being country, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to a paging object containing simple playlists.\n   * Not returned if a callback is given.\n   */ getPlaylistsForCategory: function(categoryId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/browse/categories/\" + categoryId + \"/playlists\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get a show.\n   * @param {string} showId The show's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShow('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the show. Not returned if a callback is given.\n   */ getShow: function(showId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/shows/\" + showId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several shows.\n   * @param {string[]} showIds The IDs of the shows.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShows(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the shows. Not returned if a callback is given.\n   */ getShows: function(showIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/shows\").withQueryParameters({\n            ids: showIds.join(\",\")\n        }, options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Check if one or more shows is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the show ID in the request.\n   * The boolean value of true indicates that the show is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */ containsMySavedShows: function(showIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/shows/contains\").withQueryParameters({\n            ids: showIds.join(\",\")\n        }).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Remove an show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */ removeFromMySavedShows: function(showIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/shows\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(showIds).build().execute(HttpManager.del, callback);\n    },\n    /**\n   * Add a show from the authenticated user's Your Music library.\n   * @param {string[]} showIds The show IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */ addToMySavedShows: function(showIds, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/shows\").withHeaders({\n            \"Content-Type\": \"application/json\"\n        }).withBodyParameters(showIds).build().execute(HttpManager.put, callback);\n    },\n    /**\n   * Retrieve the shows that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist show objects. Not returned if a callback is given.\n   */ getMySavedShows: function(options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/me/shows\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Get the episodes of an show.\n   * @param showId the show's ID.\n   * @options {Object} [options] The possible options, being limit, offset, and market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getShowEpisodes('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    episodes in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */ getShowEpisodes: function(showId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/shows/\" + showId + \"/episodes\").withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Search for a show.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchShows('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchShows: function(query, options, callback) {\n        return this.search(query, [\n            \"show\"\n        ], options, callback);\n    },\n    /**\n   * Search for an episode.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchEpisodes('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */ searchEpisodes: function(query, options, callback) {\n        return this.search(query, [\n            \"episode\"\n        ], options, callback);\n    },\n    /**\n   * Look up an episode.\n   * @param {string} episodeId The episode's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisode('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episode. Not returned if a callback is given.\n   */ getEpisode: function(episodeId, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/episodes/\" + episodeId).withQueryParameters(options).build().execute(HttpManager.get, callback);\n    },\n    /**\n   * Look up several episodes.\n   * @param {string[]} episodeIds The IDs of the episodes.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getEpisodes(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the episodes. Not returned if a callback is given.\n   */ getEpisodes: function(episodeIds, options, callback) {\n        return WebApiRequest.builder(this.getAccessToken()).withPath(\"/v1/episodes\").withQueryParameters({\n            ids: episodeIds.join(\",\")\n        }, options).build().execute(HttpManager.get, callback);\n    }\n};\nSpotifyWebApi._addMethods = function(methods) {\n    for(var i in methods){\n        if (methods.hasOwnProperty(i)) {\n            this.prototype[i] = methods[i];\n        }\n    }\n};\nmodule.exports = SpotifyWebApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/spotify-web-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/spotify-web-api-node/src/webapi-request.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spotify-web-api-node/src/webapi-request.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Request = __webpack_require__(/*! ./base-request */ \"(rsc)/./node_modules/spotify-web-api-node/src/base-request.js\");\nvar DEFAULT_HOST = \"api.spotify.com\", DEFAULT_PORT = 443, DEFAULT_SCHEME = \"https\";\nmodule.exports.builder = function(accessToken) {\n    return Request.builder().withHost(DEFAULT_HOST).withPort(DEFAULT_PORT).withScheme(DEFAULT_SCHEME).withAuth(accessToken);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc3BvdGlmeS13ZWItYXBpLW5vZGUvc3JjL3dlYmFwaS1yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUM7QUFFdEIsSUFBSUMsZUFBZSxtQkFDakJDLGVBQWUsS0FDZkMsaUJBQWlCO0FBRW5CQyxzQkFBc0IsR0FBRyxTQUFTRyxXQUFXO0lBQzNDLE9BQU9SLFFBQVFPLE9BQU8sR0FDbkJFLFFBQVEsQ0FBQ1AsY0FDVFEsUUFBUSxDQUFDUCxjQUNUUSxVQUFVLENBQUNQLGdCQUNYUSxRQUFRLENBQUNKO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1zb25nLXRyYW5zbGF0aW9uLy4vbm9kZV9tb2R1bGVzL3Nwb3RpZnktd2ViLWFwaS1ub2RlL3NyYy93ZWJhcGktcmVxdWVzdC5qcz9jZjQ3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFJlcXVlc3QgPSByZXF1aXJlKCcuL2Jhc2UtcmVxdWVzdCcpO1xuXG52YXIgREVGQVVMVF9IT1NUID0gJ2FwaS5zcG90aWZ5LmNvbScsXG4gIERFRkFVTFRfUE9SVCA9IDQ0MyxcbiAgREVGQVVMVF9TQ0hFTUUgPSAnaHR0cHMnO1xuXG5tb2R1bGUuZXhwb3J0cy5idWlsZGVyID0gZnVuY3Rpb24oYWNjZXNzVG9rZW4pIHtcbiAgcmV0dXJuIFJlcXVlc3QuYnVpbGRlcigpXG4gICAgLndpdGhIb3N0KERFRkFVTFRfSE9TVClcbiAgICAud2l0aFBvcnQoREVGQVVMVF9QT1JUKVxuICAgIC53aXRoU2NoZW1lKERFRkFVTFRfU0NIRU1FKVxuICAgIC53aXRoQXV0aChhY2Nlc3NUb2tlbik7XG59O1xuIl0sIm5hbWVzIjpbIlJlcXVlc3QiLCJyZXF1aXJlIiwiREVGQVVMVF9IT1NUIiwiREVGQVVMVF9QT1JUIiwiREVGQVVMVF9TQ0hFTUUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGRlciIsImFjY2Vzc1Rva2VuIiwid2l0aEhvc3QiLCJ3aXRoUG9ydCIsIndpdGhTY2hlbWUiLCJ3aXRoQXV0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/spotify-web-api-node/src/webapi-request.js\n");

/***/ })

};
;